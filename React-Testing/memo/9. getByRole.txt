1. getByRole()
=> 특정 "역할(role)"을 가진 DOM 요소를 찾는 데 사용됩니다. 

1-1. 구문
=> screen.getByRole(role, options)
=> role: 찾으려는 요소의 역할 (예: "button", "heading", "textbox" 등)
=> options (선택 사항)
name: 요소의 이름(label)을 기준으로 검색 (보통 aria-label이나 텍스트 내용)
hidden: 숨겨진 요소도 검색할지 여부 (default: false).

1-2. name 옵션
=> 요소의 이름(label)을 기준으로 검색을 좁힐 수 있습니다. 이름은 보통 다음 중 하나에서 가져옵니다
1. name 속성
2. aria-label 속성
3. aria-labelledby 속성

1-3. hidden 옵션
=> 기본적으로 getByRole은 display: none과 같이 숨겨진(hidden) 요소를 무시합니다.
=> 숨겨진 요소를 검색하려면 hidden: true를 사용합니다.


2. HTML - Role
=> HTML의 많은 태그들은 이미 접근성을 위해 **암묵적으로 역할(Role)**이 정의되어 있습니다.
HTML 태그	            암묵적인 Role	        예시
<button>	            button	        <button>Click</button>
<a href="#">	        link	        <a href="#">Link</a>
<input>	                textbox	        <input type="text" />
<input type="checkbox">	checkbox	    <input type="checkbox" />
<input type="radio">	radio	        <input type="radio" />
<ul>/<ol>	            list	        <ul><li>Item</li></ul>
<li>	                listitem	    <li>Item</li>
<h1> ~ <h6>	            heading	        <h1>Title</h1

3. getByRole을 많이 사용하는 이유
3-1. 접근성 중심 테스트
=> 이 방식은 실제 사용자가 스크린 리더를 사용할 때 요소를 탐색하는 방식과 유사합니다.

3-2. 직관적이고 명확한 테스트
=> getByRole은 요소의 목적(role)을 명확하게 드러내므로, 테스트 코드를 읽는 사람이 어떤 요소를 
테스트하려는지 쉽게 이해할 수 있습니다.

3-3. 실제 사용자와 동일한 방식으로 동작

3-4. 잘못된 접근성 구현 감지


4. label-input
=> label의 htmlfor과 input의 id로 연결되어 있고 getByRole의 name을 통해 
label의 content나 aria를 넣을 떄 선택되는 요소는 input입니다.

