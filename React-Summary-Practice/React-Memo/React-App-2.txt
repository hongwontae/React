1. react-Logic
1-1. 질문 배열 객체 데이터를 받는데 answers의 키의 배열의 첫 번쨰 값이 정답이다.
1-2. 최대한 상태를 적게 유지하는 것이 좋다. => 상태를 파생시켜 활용하는 것이 좋다.

1-3. useState를 사용해서 정답 버튼을 눌렀을 떄 배열 안의 값으로 추가되게 하고 해당 배열의 length을 이용해서 
기존의 QUESTION의 index의 변화를 준다.
=> 그렇다면 QUESTION의 인덱스가 초과될 떄는?

1-4. 보여지는 quiz의 객관식을 무작위로 바꾸기 위해 기존의 배열을 복사한 뒤 sort한다.
=> sort 메서드는 기존의 배열을 건들이기 떄문이다.

1-5. 외부의 js 배열 데이터의 length와 질문의 대답 배열 length가 일치한다면? => 질문이 끝난 것이다.
=> === 로직을 사용해서 true일 경우 마무리 components을 보여준다.
=> 이 떄 외부의 js 배열 데이터나 질문의 대답 배열 데이터에 접근할 떄 index가 오버되면 에러가 발생한다.

1-6. 한 컴포넌트에 useEffect이 두 개라면?
=> 컴포넌트 실행 => 첫 번쨰 라인 effect, 두 번쨰 라인 effect 실행일 뿐이다.

1-7. useEffect의 의존성 배열 => useCallback을 통해 재생성을 막아서 트리거 되지 않게 한다.

1-8. 커스텀 컴포넌트도 key props가 존재
=> 부모 컴포넌트가 리렌더링될 떄 자식이 받은 key value가 달라지면 새로운 인스턴스가 된다.

1-9. 정답을 선택하면 바로 다음 인스턴스 질문지로 넘어가는 것이 아닌 정답 버튼을 표시한 뒤
2초 뒤에 다음 인스턴스 질문지로 가는 로직를 구현해보자
=> 정답을 누르면 트리거되는 핸들러 안에서 또 다른 상태 변화 함수를 answer/correct/wrong 로직을 구현한다.
=> setTimeout을 통해 시간이 지나면 다음 질문지로 넘어가게 한다.




2. css