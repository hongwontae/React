1. 동적 세그먼트
1-1. :이 붙은 경로는 동적으로 어떠한 값이든 받아들인다.
1-2. product/:productsId or :itemId => http://localhost:3000/product/hwt(123),(1gl2)

1-3. 동적 세그먼트 우선순위는 더 구체적인 것부터 적용한다.
=> /events vs /events/:eventsId 중 우선순위는 먼저 앞선것부터이다.
=> events/new vs events/:evnetsId 중 우선순위는 new부터이다. => new라는 세그먼트가 구체적이기 때문이다.



2. useParams
2-1. 해당 컴포넌트의 경로를 가져온다.
2-2. const params = useParams()
2-3. const param = params.동적세그먼트
=> param에 경로 존재


3. 상대 경로와 절대 경로

3-1. 절대 경로란 자신만의 경로를 가지고 있다는 뜻이다.
3-2. /로 시작한다.

3-3. / 없이 시작하면 상대 경로가 된다.
3-4. createBrowserRouter에서 부모-children 관계가 형성되고 path가 형성될 떄 자식이 상대경로라면 자식의 경로 앞에
부모의 경로가 첨부된다.


3-5. Link to=".." => back이다.
3-6. 그러나 자녀-부모 관계의 back이기 떄문에 자식만 가지고 있던 path가 전부 사라지는 것이다.
3-7. relative="path"를 사용하면 한 세그먼트만 제거한 라우트로 이동한다.
=> 기본값은 reletive="route"이다.


4. index route
4-1. 부모 라우트가 활성화되면 표시되어야 하는 element을 의미한다.
=> children : [{index : true, element : <Home/>}]
=> Home은 부모가 라우터가 활성화되면 트리거된다.


*** 오늘의 삽질
url은 무조건 문자열로 이루어져야한다. => ele.id 같이 숫자로 주면 못알아먹는다.
=> 그래서 {`${ele.id}`}로 처리한다.




