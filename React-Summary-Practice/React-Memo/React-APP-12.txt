React 주요 패턴 및 Example


1. 컴파운드 컴포넌트(합성 컴포넌트 패턴)
=> 여러 개의 컴포넌트가 협력하여 하나의 고유한 컴포넌트를 구성하는 패턴이다.
=> 연결성, 재사용성, 유연성, 가독성, 유지보수성이 존재하는 리액트 패턴을 의미한다.
=> children과 props를 통해서 위의 사안들을 지키는 패턴을 만들어내면 된다.

1-1. 특수한 기능
=> 부모-자식 관계를 명확하게 보여주기 위해서 부모 컴포넌트에서 ParentsComponent.Item = ChildrenComponent 코드를 적용할
수 있다.
=> 이후 APP 컴포넌트에서 ParentsComponent.Item으로 ChildrenComponent를 대체할 수 있다.

1-2. 현재 컴파운드 컴포넌트는 children으로 구현되있기 떄문에 props로 값을 내려줄 수 없다.
=> context를 이용해서 내려준다.

** 내 생각으로는 좀 불필요한 작업이 많다.


2. Render Props
=> children prop으로 함수(즉, "render prop")를 받아서 그 함수를 호출하여 UI를 렌더링하는 방식이다.
=> 유연성, 재사용성, 컴포지션의 특징이 존재한다.

2-1. children이란 키워드를 받아서 자식 컴포넌트에서 실행시킨다.
2-2. 부모 컴포넌트는 children이 들어갈 자리에서 함수를 선언한다.
(item)=>{
    return <Place item={item}/>
}
2-3. children은 JSX를 반환하는 함수이고 자식 컴포넌트에서 알아서 사용하면 된다.

2-4. Render props를 이용해서 JSX를 반환하는게 주 목적이지만 동적인 키를 만들 떄도 사용된다.
1. props에서 동적인 키를 반환하는 함수를 정의한다.
2. 자식에서 key에 props를 호출한다.


3. 디바운싱 작업
=> 디바운싱(debouncing)은 특정 이벤트가 반복적으로 발생할 때, 마지막 이벤트 이후 일정 시간이 지나면
이벤트를 처리하도록 하는 기법이다.

** 어떻게 구현할까?
=> 고민해보자



