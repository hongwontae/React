1. 인증은 두 가지 대중적인 방법이 존재한다.

** 인증이란?
=> 웹 사용자가 특정 리소스에 접근할 떄 권한이 주어지기 전에 이루어져야 하는 일련의 과정

user credentials를 보내는 것부터 시작한다.
=> email-password => response

1-1. 서버 사이드 세션
=> 풀스택 앱에서 많이 사용된다.
=> 사용자가 요청을 보내고 인증이 되면 서버에 고유 식별자를 저장한다.
=> 고유 식별자를 어떠한 처리를 해서(id) client에 다시 보낸다.
=> 이제 클라이언트는 id를 통해서 리소스에 접근하면 서버의 확인 통해 리소스를 전달해준다.

1-2. 인증 토큰
=> 사용자가 유효한 자격 증명을 전송하고 허가 토큰을 생성하나 저장하지 않는다.
=> 토큰은 KEY와 알고리즘으로 만들어졌다.
=> 토큰은 백엔드에서 생성하고 클라이언트에 전송한다. 클라이언트는 해당 토큰을 저장하고 리소스에 접근할 때마다 전송한다.
=> 백엔드에서만 토큰의 유효성을 검사하는데 이 떄 key가 사용된다.



3. 쿼리 매개변수
3-1. url ? 뒤에 붙는 변수를 의미한다.

3-2. 형태
1. ?로 시작
2. key=value 형식
3. 이어 붙일거면 &사용

3-3. 리액트 라우터 돔 라이브러리의 프로젝트는 쿼리 파라미터를 link, NavLink의 to에 넣는다.


4. Logic
4-1. login 이후에 action으로 http 요청을 보내는 로직이다.
4-2. new URL(request.url).searchParams를 통해 쿼리 파라미터를 가져와서 동적으로 login과 create-user 백엔드
요청을 알아낸다.
4-3. if문을 통해서 올바르지 않은 쿼리 파라미터일 떄 throw json을 던진다.
4-4. status, response.ok을 통해 에러를 처리한다.


5. token 인증 Logic
5-1. 인증요청을 보내면 token은 response안에 대부분 존재한다.
5-2. localStorage.setItem('token' token)을 통해 저장하여 사용한다.
5-3. 토큰을 통해 리소스에 접근할 때는 인증 헤더가 중요하다.
=> headers : {
    'Authorization' : 'Bearer ' + token(get으로 가져온 token)
};
5-4. 토큰이 존재하지 않으면 action을 통해서 redirect하는 로직 존재


6. error 처리 로직
6-1. error, error.errors는 항상 전달받는 것이 아니기 떄문에 조건부로 표현해야한다.
6-2. error : {
    errors : {
         :...,
        password : ...
    },
    message : string...
} 형태를 갖추어서 보내진다.
6-3. Object.values(data.errors).map((ele)=>{return <li key={ele}>{ele}</li>})을 통해 표현한다.
=> key는 필요없고 그 안에 데이터만 표시하기 위해서 


7. logout 로직
7-1. Form의 action을 사용한다.
7-2. action은 localStorage.removeItem('token')을 호출하고 redirect한다.


8. 자동 로그 아웃 로직
8-1. 모든 element을 포함하고 있는 rootLayout에서 useEffect 로직을 사용한다.
=> 하위의 라우터가 실행될 떄마다 rootLayout도 실행되기 떄문에...




*** 오늘의 삽질
*** throw를 던지거나 알맞지 않은 url로 접근을 할 떄 해당되는 errorPage가 렌더링되는 것이다.




