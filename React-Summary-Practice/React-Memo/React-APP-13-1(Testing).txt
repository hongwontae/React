Testing

1. 테스트란?
1-1. 수동적인 테스트
=> 코드를 작성하고 브라우저에서 테스트
=> 수동으로는 모든 조합과 시나리오를 테스트하기 어렵다.

1-2. 자동화 테스트
=> 기존 코드를 테스트하는 코드를 작성하여 테스트하는 방식
=> 기술적인 부분이지만 모든 것을 상시에 테스트할 수 있다.
=> 에러를 더 일찍 잡고 더 나은 코드 작성 가능

2. 테스트의 종류
2-1. Unit Testing
=> 일부분만 테스하는 방식
=> 독립적인 컴포넌트만 테스트하는 방식

2-2. Integration Testing
=> 여러 개의 구성요소들을 테스트하는 방식

2-3. End-To-End Testing
=> 전 구간 테스트, 전체 Application의 워크플로우를 테스트하는 방식


3. 무엇을 테스트할지 => 작은 블록부터(독립적인 컴포넌트부터) 테스트한다.
4. 어떻게 테스트할지 => 발생할 수 있는 성공 및 오류 사례를 테스트한다.


5. 테스트 설정 및 Tools
5-1. 테스트 코드를 실행하고 결과를 확인하는데는 jest를 많이 사용한다.
5-2. 컴포넌트를 렌더링하고 시뮬레이팅하는데는 리액트 테스팅 라이브러리를 사용한다.
5-3. create-reate-app를 사용하면 자동으로 jest와 리액트 테스팅 라이브러리가 설치된다. => package.json에서 확인가능


6. 테스트-1
6-1. setupTests.js => 테스트 설정 파일
6-2. test.js => 테스트 파일
=> test()에 인자를 넣는다.
=> 1번쨰 인자는 테스트 설명자이다.

=> 2 번쨰 인자는 익명 함수를 받는다.
=> 여기에 실제 테스트 코드를 작성한다.
=> 테스팅 라이브러리에서 가져온 render를 통해 가상으로 렌더링한다. render(<App/>); => 시뮬레이팅이 된 브라우저
=> const data = screen.getByText('') => 렌더링이되는 텍스트를 식별한다.
=> expect(data).toBeInTheDocument() => 실제 data가 존재하는 확인한다.

6-3. 자동 테스트 명령어 => package.json에 존재한다.
=> 명령을 실행하면 전체 테스트 실행, 일부 테스트 실행 등 선택을 한 뒤 테스트를 실행한다.
=> 테스트의 결과로 테스트 설명자, 테스트의 성공 실패 결과가 발생한다.


7. 테스트를 작성할 떄 3가지 규칙 3A
7-1. Arrange => 조건과 환경을 구성 (렌더링)
7-2. Act => 실행
7-3. Assert => 단언

7-4. 로직
import {render, screen} from '@testing-library/react'
=> render는 가상 브라우저를 실행시켜서 인자의 컴포넌트를 실행시키는 것이다.
=> screen은 가상 브라우저에 대한 조건 함수이다.

const helloWorldElement = screen.getByText('Hello World');
=> Hello World라는 텍스트를 가지고 있는 element이 존재하는가?

expect(helloWorldElement).toBeInTheDocument()
=> 가상 브라우저에 helloworldElement의 테스트 성공 여부


8. Test Suites/ Tests
8-1. 테스트를 그룹화 할 수 있다.

8-2. description('테스트 그룹', ()=>{
    test('p existing?',()=>{
        ...
    })
    test('hello world existing?', ()=>{
        ....
    })
})
=> 테스트 결과에서 Test Suites에 포함된다. Tests에도 결과가 반환된다.




