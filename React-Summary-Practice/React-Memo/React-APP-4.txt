1. 현재 제공하고 있는 리액트 프로젝트는 각 유저에게 인스턴스로 전달되고 있을 뿐이다.
=> 그 자체로 데이터를 공유하거나 push/pull할 수 없다.

2. 데이터를 다루기 위해 backend와 DB => 중앙 서버가 필요하다.

3. DB와 Front-end의 직접적인 연결은 보안의 위험성이 매우 크다.
=> HTTP 요청을 통한 백엔드 서버와의 통신으로 DB의 데이터에 접근하는 방식을 사용해야 한다.


4. HTTP 요청은 비동기 처리 함수를 사용한다.


5. 컴포넌트 함수는 async 키워드를 직접 받을 수 없다.


6. 컴포넌트 함수 안에서 함수 호출를 하는데 그 안에서 setFunc을 사용한다면 무한 루프가 된다.
=> fetch나 axios를 그냥 사용할 떄의 문제점
=> useEffect와 의존성 배열을 사용하여 문제을 해결한다.
=> useEffect + HTTP의 또 다른 이점은 useEffect의 콜백만 실행하기 때문에 이벤트 큐에 가서 다른 코드들이
    실행되는 의도치 않은 흐름을 막을 수 있다.


7. 일반적인 promise를 다룰 떄의 에러 처리는 catch/ async의 경우 try-catch를 사용한다.
=> catch로 받을 떄 Error 컴포넌트를 트리거할 수 있는 상태를 사용한다.
=> error 컴포넌트에 message는 알아서 처리해보아요!


8. Geolocation API는 비동기적으로 동작한다. 


