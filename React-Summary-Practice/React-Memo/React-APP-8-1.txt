1. loader
1-1. 백엔드와 통신하는 라우터가 존재할 경우 해당 라우터에 도착할 떄 http 통신을 실행한다.
=> 라우터에 컴포넌트를 렌더링하기 전에 loader를 사용해서 통신을 한 뒤 데이터로 렌더링해보자.

1-2. createBrowser 배열 객체 안에 loader props를 사용할 수 있다. 함수를 value로 받는다.
1-3. 해당 라우터를 방문하기 직전에 R-R-D은 항상 loader를 실행시킬 것이다.
=> 렌더링 전/ JSX 코드가 렌더링되기 전에 실행된다.

1-4. loader 함수에 return 값은 loader를 가지고 있는 path의 element가 취할 수 있다.
1-5. 또한 다른 element에게 전달할 수 도 있다.
=> return 시에 data.json() 처리를 해준다.
=> 또한 async 내부의 함수이기 떄문에 return 값이 Promise에 담겨지는게 정석이지만 router 라이브러리가 알아서 리졸브된
값을 가져온다.

1-6. loader를 정의하면 useLoaderData를 통해 데이터를 가져올 수 있다.
=> 같은 레벨의 element, 해당 컴포넌트로부터의 자식 레벨의 element, 부모 모두 사용불가
=> 다만 부모 loader는 useRouteLoader(id)를 통해 접근할 수 있다.
=> useRouteLoader를 사용할 수 있는 컴포넌트는 router로 등록된 element 뿐만 아니라 일반 컴포넌트도 가능하다.


1-7. loader의 위치는 라우트를 정의하는 곳이 아니라 Router 컴포넌트에서 구현하고 export를 통해 해결한다.
=> 정석


1-8. RootRouterCompoennt => loader 실행(다만 loader의 함수 실행이 끝나기 전까지 
another Router로 가지 못하고 RootRouter에 머물러 있다고 loader가 완료되면 another로 이동) => 다른 route 컴포넌트
=>loader가 실행되면서 이동될 라우트는 loadgin state와 idle state를 갖기 떄문에 두 번 실행된다.



2. useNavigation
=> 현재 라우터가 전환이 진행되는지, 데이터 로딩하는 중인지, 전환이 진행되지 않는지를 알 수 있다.
=> 이를 훅은 전환된 페이지가 아니라 전환 전 페이지에 알맞은 데이터가 전송된다.

=> const navi = useNavigation();
=> navi.state : idle, loading, submmitted 상태가 존재한다.


3. new Response();
=> 브라우저 내장 객체이고 응답 객체를 생성해준다.
=> new Response를 통해서 응답 객체를 수동으로 만들 떄 첫 번쨰 인자는 JSON.stringify를 통해서 만들어줘야 한다.
=> 응답 객체의 body는 JSON 형태를 갖추기 때문 => 받을 떄는 JSON.parse로 받는다.
=> status, statusText는 응답이 올 떄 js-obj으로 오기 떄문에 고려하지 않아도 된다.


4. loader 에러처리

4-1. loader 안에서 에러를 트리거하고 에러가 발생하면 객체를 반환한다.
=> 해당 객체를 통해서 에러 JSX를 반환하는 로직

4-2. throw를 사용한다.
=> loader 함수 실행 중에 throw가 트리거되면 errorElement로 전환한다.
=> errorElement는 자신과 가장 가까운 errorElement를 트리거한다.
=> 부모 errorElement로 올라간다. => 자식 errorElement는 의미없다.


5. loader 에러처리

5-1. loader 함수 실행 중 HTTP 통신을 할 떄 throw {message : 'Could not find page'}로 처리했을 경우
=> cosnt error = useRouteError();
=> error = {message : 'Could not find page'}가 전달된다.
=> error.message를 통해서 에러내역을 가져올 수 있다.


5-2. 5-1에서 throw를 날릴 떄 new Response 객체로 에러를 처리했을 경우
=> const error = useRouteError();
=> error = {
    data : '{message : ....}', => message는 JSON이다.
    status : ...,
    satusText : ...
}
=> JSON.parse(error.data) => js 객체로 바꾼다.
=> (error.data)message로 접근가능


*** status : 404 => http 전송 에러 status 

5-3. error를 가져와서 if-status를 통해 알맞은 에러 데이터를 전송하고 MainNavigation.jsx를 통해 
UI을 업그레이드 한다.


6. react-router-dom의 json()
=> json() 함수는 응답객체를 수동으로 보낼 떄 new Response()의 업그레이드 버전이다.
=> json({message : 'Could not find resource and page'}, {
    status : 500,
    statusText : '500은 개발자가 만들어낸 임의의 에러 status 코드입니다.'
})
=> 보낼 떄 JSON.stringify을 사용하지 않아도 알아서 형태를 갖춘다.
=> useRouteError로 받을 떄도 JSON.parse()를 사용하지 않아도 형태를 갖춘다.



6. loader function의 매개변수
6-1. 로더 함수가 실행될 떄 자동적으로 두 가지 객체를 받는다.

6-2. request => 요청 객체
6-3. params => 파라미터 객체


7. loader 함수의 접근 권한은 loader를 가지고 있는 route를 기준으로 형제나 자식들에게 줄 수 있다.
=> 형제일 떄는 useRouterData를 통해서 그냥 가져오면 된다./ 가장 가까운 loader를 가져온다.
=> 자식의 경우 ueeRouteDataLoader('route-id')를 통해서 가져올 수 있다.


8. 해당 라우터에 도달하지 않는 이상 렌더링되지 않고 loader도 실행이 되지 않는다.
9. loader는 렌더링되기 전에 실행되고 컴포넌트는 loading, idle 상태를 갖는다.
10. 기본적인 컴포넌트 형태를 따르기 떄문에 잘 봐야 한다. => RootLayout-MainNavigation의 관계

