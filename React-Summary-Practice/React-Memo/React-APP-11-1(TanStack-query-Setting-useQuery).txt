1. 초기 파일 로직
1-1. React-router-dom을 사용해서 컴포넌트 구축
1-2. <Navigate> => 컴포넌트 import => to props로 이동가능
=> path : / , element : <Navigate to="/events"/> => /이라면 /events로 이동한다.

1-3. Outlet => 레이아웃을 처리할 떄 페이지가 보여줘야 되는 위치를 설정하는 컴포넌트


2. TanStack이란?
2-1. HTTP 요청을 전송하고 front-User-Interface - backend-Data 동기화된 상태로 유지하는데 이용하는 라이브러리
=> HTTP 요청 코드를 줄여주고 많은 고급기능이 탑재된 것 => TanStack


3. TanStack Basic
3-1. 설치 => npm install @tanstack/react-query

3-2. tanStack 쿼리는 fetch 처리를 해주는 라이브러리가 아니다.
=> fetch 로직은 따로 모아서 util이라는 폴더에 export로 내보낸다.

3-3. useQuery
1. http get 요청을 대신해서 보내주고, 데이터와 로딩, 에러에 대한 정보를 제공하는 함수이다.
=> get을 처리하는 최적화된 쿼리/ 다른 요청은 다른 함수를 사용하는 것이 효율적이다.
2. useQuery는 컴포넌트가 렌더링되면 바로 요청을 보낸다. => useEffect의 초기 모습
3. useQuery({
    queryFn : (queryFn은 프로미스를 반환하는 함수를 value로 삼는다.)
}) => 해당 형태를 갖춘다.

3. queryKey 
=> 전송하는 모든 get HTTP는 쿼리 키가 존재한다. 쿼리 키를 이용해서 요청으로 생성된 데이터를 캐시 처리한다.
=> 동일한 요청이 왔을 떄 이전 요청의 응답을 재사용할 수 있다.
=> queryKey는 배열이다. 키의 값은 개발자가 알아서 설정하면 된다.
=> 배열 값을 통해서 데이터를 재사용할지 말지 결정한다.


4. useQuery에 queryKey와 queryFn을 설정하면 객체를 얻을 수 있다.
=> const {data, isPending} = useQuery({
    queryKey : ['events'],
    queryFn : fetchEvents
})
4-1. data => http 요청이 완료된 이후에 data
4-2. isPending => 요청이 실행중인지, 응답을 받았는지 알려주는 boolean
=> 응답을 받으면 false/ 쿼리가 비활성되거나 요청이 실행중이면 true
4-4. isError => 요청 실패의 Boolean
=> ture가 되려면 요청 전송 코드(fechEvents)가 throw를 던질 떄이다.
4-5. error => error data
4-6. refetch => 수동으로 호출해 동일한 쿼리를 다시 전송할수 있다.

5. 리액트 쿼리에서 데이터를 저장하고 재사용 기간을 구성할 수 있다. => 사용자 경험 상승

6. 리액트 쿼리를 사용하려면 사용할 컴포넌트를 <QueryClientProvider>로 덮어야 한다.
7. 또한 QueryClientProvider의 client props에 특정 값을 줘야한다. 
=> const queryClient = new QueryClient(); <QueryClientProvider client={queryClient}>


8. tanStack으로 이루어진 web 화면을 전환하고 다시 들어오면 해당 화면의 컴포넌트의 http 요청을 다시 보낸다.
=> 기본값



