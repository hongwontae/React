1. 낙관적 업데이트
1-1. 데이터를 수정 할 떄 UI를 먼저 해당 데이터로 업데이트하고 통신이 실패했을 떄 Rollback하는 방식

1-2. onMutate
1. 함수를 값으로 받는다.
2. mutate를 호출하는 즉시 실행된다. mutate가 완료되기전에, 응답을 받기 전에 실행이 되는 것이다.
1-3. onMutate : ()=>{
    4
}

1-4. queryClient.cancelQueries()를 이용해서 해당 쿼리 키로 보내는 쿼리를 취소한다.
=> await queryClient.cancelQueries({queryKey : ['queryKey']})
=> 비동기 함수이기 떄문에 await를 사용한다.
=> 현 로직에서는 없어도 되긴 하다.


1-5. 낙관적 업데이트가 실패했을 경우 => 이전 데이터를 저장하여 사용해야 한다.
=> const previous data = queryClient.getQueryData([events, id]);


1-6. queryClient.setQueryData()를 통해 캐시된 데이터를 응답을 기다리지 않고 변경할 수 있다.
=> 두 가지 인수가 필요하다.
=> 하나는 해당되는 쿼리 키, 다른 하나는 새 데이터이다.
=> 새 데이터를 가져오는 방법은 mutate의 인자가 자동적으로 onMutate의 매개변수에 들어오는 것을 사용한다.
=> useMuatation을 취소하지 않고 useQuery만 취소한다.


1-7. 변형이 실패했을 경우 onError props를 사용한다.
=> onError는 자동적으로 몇 가지 매개변수를 갖는다.
=> error, mutate-data, context를 수신한다.

=> context에 previousData가 존재한다.
=> context에 값을 받으려면 onMutate의 return 값으로 주면 된다.


1-8. onSettled
=> vlaue로 함수를 받는다.
=> mutate가 완료될 떄마다 호출되는 props (성공하든 error가 전달되든 실행하는 메서드)
=> 이제 모든 특정 쿼리들을 무효화해서 get http로 데이터의 일치여부를 확인한다.


React-Query 낙관적 업데이트 정리
1. 데이터를 수정하는 http 요청을 보낸다. mutationFn : fetchUpateOne
2. onMutate를 사용한다. => mutate가 호출되면 즉시 호출되고 mutate의 응답이 오기 전까지는 실행된다.
3. onMutate에서 queryClient.cancelQueries()를 사용해서 useQuery의 활성 쿼리를 막는다.
=> get으로 가져온 데이터와 낙관적 업데이트 데이터의 충돌을 막기 위해서이다.

4. 낙관적 업데이트가 실패했을 경우를 대비해서 기존의 데이터를 가져와서 저장한 뒤 return한다.
=> return된 값은 onError 메서드의 매개변수 3 번쨰 값으로 전달된다.

5. 낙관적 업데이트를 위해서 queryClient.setQueryData([querykey], newData)를 호출한다.
=> newData를 가져오는 방법은 onMutate의 매개변수가 자동적으로 mutate의 인자를 모조리 가져온다.
=> 이를 사용하면 된다.

6. onError를 통해서 실패했을 경우 기존의 데이터로 돌려놓는다.
queryClient.setQueryData()...

7. onSettled => mutate가 끝나면 (실행되거나 에러가 발생하면) 실행하는 메서드
=> queryClient.invalidateQueries를 통해 데이터를 가져와서 일치를 확인하는 과정이다.
=> refetchType를 때에 따라 사용해야 한다.





** queryClient는 리액트 쿼리, 캐시와 상호작용한다.
