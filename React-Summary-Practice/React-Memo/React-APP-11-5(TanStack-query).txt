1. 무효화 후 자동 다시 가져오기 비활성화
1-1. queryClient.invalidateQueries({queryKey : ['events']})일 떄 즉시 해당 키를 가진 컴포넌트들은
refetch를 시작한다.
1-2. 그런데 1.1에서 쿼리 무효화를 실행한 컴포넌트가 post 요청으로 다른 컴포넌트에 간다면? (queryKey가 트리거되는)
1-3. 404 에러가 발생하는 것이다.

1-4. queryClient.invalidateQueries({refetchType : 'none'})을 설정하면 해당 컴포넌트가 무효화되지 않는다.
그리고 다음 렌더링에 호출되어 데이터를 업데이트한다.


2. EditPage Logic
2-1. useQuery를 사용한다. => 그리고 해당 쿼리는 detailPage와 같은 쿼리 키와 쿼리 함수를 사용한다.
=> detailPage에 먼저 들어가고 editPage를 트리거하기 떄문에 캐시처리된 데이터가 edit에 향한다.

2-2. data, isPending, isError를 통해서 상황에 맞게 처리한다.




*** 삽질
1. useQuery를 통해 data를 불러와서 처리했는데 isPending, isError를 처리하지 않고 data를 사용했다.
=> 당연히 처음 렌더링될 떄는 data가 존재하지 않기 떄문에 error가 발생했다.

2. 하위 컴포넌트에 함수를 내려주고 함수 트리거를 밑에 컴포넌트가 할 수 있는 로직을 잠시 까먹었었다.
=> 금방 정신차림
=> 이걸 하는 중요한 이유는 인자로 하위 컴포넌트 값을 가져와서 상위 컴포넌트에서 사용하려고 + 하위 컴포넌트에게 제어권
주려고

