1. SPA Routing
1-1. 웹사이트에 접근할 때 도메인에 접근하고 서버는 그에 알맞는 페이지를 제공한다.
1-2. 다른 URL로 접속하면 그에 해당하는 페이지를 제공한다.
=> 이를 리액트 라우터 기능을 통해 구현가능

1-3. HTTP 요청을 보내서 하나의 HTML 파일을 가져온다. => 해당 HTML에 모든 React Page가 존재한다.
=> 요청에 따라 다른 컴포넌트를 보여줄 뿐이다.


2. 리액트 라우터 설정
npm install react-router-dom


3. createBrowserRouter
3-1. 리액트 라우터를 설정하는 함수이다. 인자로 배열-객체를 받는다.
3-2. path => 경로를 의미
("/", "" differen => 현재로서는 같다.)
3-3. element => 해당 경로의 JSX

3-4. createBrowserRouter 호출하고 배열 객체를 정의한 후에 변수에 할당한다.
3-5. RouterProvider 컴포넌트를 import하고 router prop에 3-4의 변수를 할당한다.
3-6. APP JSX는 이제 RouterProvider 컴포넌트만 존재하게 된다.

3-7. router 6.4 이전에는 createRoutesFromElements, Route(컴포넌트)를 사용해서 createBrowserRouter에 인자에 넘겨주었다.

  // const routerDefinition = createRoutesFromElements(
  //   <Route>
  //     <Route path="/" element={<HomePage/>}></Route>
  //     <Route path="/products" element={<Products/>}></Route>
  //   </Route>
  // );

  // const router = createBrowserRouter(routerDefinition)


4. URL
=> https => 프로토콜
=> ://localhost => 도메인
=> /produecs => path(경로)


5. Link
5-1. a 태그의 href 속성을 통해 다른 라우트를 트리거하는 것은 비효율적이다.
=> a 태그의 기본동작은 서버에 요청을 보내기 떄문에 새로고침을 한다.
=> 새로고침하여 새로운 html를 다운하고 실행시키고 react도 다시 실행시킨다.

5-1. router의 Link 컴포넌트는 a 태그의 기본동작을 하지 않고 해당되는 url의 컨텐츠만 가져온다.
5-2. Link 컴포넌트는 /붙으면 절대 경로이고 /가 없으면 상대경로이다.
=> 상대경로일 떄는 현재 url에 to의 문자열을 붙여버린다.


6. 레이아웃 및 중첩된 라우트

6-1. 레이아웃을 구성방법
1. 객체를 생성하여 하위를 아우르는 경로 생성 => {path : /}
2. 레이아웃을 나타낼 컴포넌트 element에 추가
3. children prop으로 레이아웃 효과를 받을 컴포넌트 배열-객체 형식으로 또 다시 갖춘다.
children : [{path... ele:...},{...}]
4. 레이아웃을 나태낼 컴포넌트에서 레이아웃이 어디에 필요한지 알려준다. => <Outlet> 컴포넌트를 사용한다.


7. errorElement
7-1. errorElement props는 해당 경로부터 시작하는 url인데 실체가 존재하지 않다면 컴포넌트를 반환한다.
=> 에러 컴포넌트를 생성해서 넣어주면 된다.
=> children의 error path도 처리한다.


8. NavLink
8-1. 현재 활성인 라우트의 경로가 NavLink의 경로로 시작하는지 확인한다.
(현재 활성인 라우트가 링크에 설정된 경로로 시작하면 활성인 것으로 간주한다._
=> 요약하자면 NavLink의 to="/"이라면 다른 NavLink to="/pro" or to="sales" 이라도 선택된 것으로 간주한다.

8-2. className=(({isActive})=>{
    return isActive ? '': ''
}) => 현재 라우터의 path와 to의 path가 같다면 해당 CSS를 적용해라.

8-3. end
=> 8-1의 기본사항을 적용하지 않는다.

8-4. 근데 업데이트 된건지 8-1이 적용되지 않네요

8-5. NavLink의 isActive css 적용은 다른 라우트가 트리거될 떄까지 유지한다.


9. useNavigate
=> const navigate = useNavigate();
=> navigate('/products')
=> /products 경로로 이동한다.
=> 프로그램적으로 이동한다.







