1. 재사용 가능한 "카드" 컴포넌트 추가하기
감싸는 래퍼 클래스를 만들고 싶다면 => props.children를 활용하면 된다.
props.children은 JSX가 아니라 JS 표현식이다. props.children은 card 컴포넌트의 여닫는 태그 사이에 있는 컨텐츠를 준다.

현재 감싸는 래퍼 클래스는 내장된 HTML 컴포넌트가 아니다. 사용자 정의 컴포넌트이기 때문에 그 컴포넌트 안에서 사용하는 props를 통해서만 작동할 수 있다.

=> <Card></Card>처럼 감싸는 래퍼 클래스에 속성, Class, id를 주게 되면 적용되지 않는다.
=> 속성을 주고 싶다면 래퍼 클래스 자체에 주어야 한다.
=> Card 사용자 지정 래퍼 컴포넌트에 className을 할당하고 해당 컴포넌트에 가서 props.className를 통해 구현한다.
=> 래퍼 컴포넌트의 props에는 감싼 컴포넌트들의 정보가 담겨있기 때문이다.


2. 재사용 가능한 "Button" 컴포넌트 추가하기

button의 type
1. button => 해당 버튼이 클릭할 수 있는 버튼임을 명시한다.
2. submit => 해당 버튼이 폼 데이터를 제출하는 제출 버튼임을 명시한다.
3. reset => 해당 버튼이 폼 데이터를 초기값으로 리셋하는 리셋 버튼임을 명시한다.

props로 들어오는 데이터는 감싼 요소들의 속성과 데이터들이다.


3. 사용자 입력 State 관리하기

input의 입력된 값을 JS로 불러오려면 input.value에 접근해야 한다.
=> event.target(input).value => input에 적은 값
input의 변경 사항을 트리거하여 setFunc()과 연관되어 사용될 수 있는 이벤트 onChange


4. 검증 추가 및 로직 재설정하기
input의 value값을 useState의 첫 배열값을 주게 되면 setFunc('')를 통해 변경된 값이 적용된다.
setFunc()만 사용하는 경우는 화면에는 적용되지 않는다. 뒷단의 로직은 setFunc()이 작동하지만..


5. 검증 추가 및 로직 재설정하기
input의 value는 초기값이다. => setFunc()를 실시한 다음 value 속성의 초기값이 되는 것이다.


6. 사용자 목록 컴포넌트 추가하기
props로 전달받은 값을 동적으로 JSX HTML로 보여주는 것은 map, filter를 사용하는 것이다. => 이는 규칙이다.
또한 input으로 전달받은 데이터는 해당 컴포넌트에서 바로 사용되는 경우가 거의 없기에 데이터를 끌어올려야 한다.


7. State를 통해 사용자 목록 관리하기
=> on으로 시작하는 속성은 이벤트의 key로 사용하는 것이 관례이다.
=> input 컴포넌트에서 form 속성의 button을 누르면 상위 컴포넌트에서 내려준 함수를 발동시킨다.
유효성 검사 => 내려준 함수 실행 => 초기값으로 전환 로직이 담겨있다.
=> 받은 데이터를 렌더링 컴포넌트에 내려주고 map를 사용하여 동적 렌더링한다.


8. ErrorModal 컴포넌트 추가하기
Modal를 사용해서 error를 처리하자.


9. 오류 State 관리하기
1. false와 true 값을 이용해 errorModal를 보이게 하거나 사라지게 하거나 할 수 있다.
2. 이 때 useState를 통해 true와 false 값을 조절해야 하고 Modal를 렌더링하는 컴포넌트에서 modal의 제어 함수를 내려보내서 상태를 끌어올린다.
3.JSX 표현식를 통해 true와 false에 의해서 조건부로 렌더링한다.


























