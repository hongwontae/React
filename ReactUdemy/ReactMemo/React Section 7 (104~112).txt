1. 동적 인라인 스타일 설정하기
인라인 태그에 style 속성을 추가할 수 있다. 이 style은 JSX 표현식에서 객체를 값으로 받는다.
ex) style = {{color : !isValid ? 'red', 'black'}}
=> JSX 표현식 내에 있기 때문에 삼항 연산자로 동적인 반환을 시킬 수 있다.

** css -를 사용하는 구문은 카멜케이스를 사용하여 작성한다.
background-color => backgroundColor가 되는 것이다.

인라인 스타일을 활용하여 css를 작성하는 것은 단점이 존재한다.
1. 항상 최우선 순위이기 때문에 다른 css 파일을 오버라이딩한다.
2. JSX 구문의 가독성이 떨어진다.

** JSX를 동적으로 표현하고 싶다면 JS코드의 useState의 true, false 구문을 이용해서 !, 삼항연산자, &&, ||를 잘 이용해야 한다. 다른 방법으로는 if나 for, arr.Method를 이용하여 할당한 후에 JSX 표현식에 넣는 방법도 고려해야 한다.


2. 동적으로 CSS 클래스 설정하기
React에서는 className이 class를 의미한다.
이 className은 항상 문자열를 사용해서 css class임을 알려야 한다.
=> 이를 동적으로 해결하기 위해 백틱을 사용한다.

className = `cssClass ${!isValid ? '' : invalid}`
=> isValid가 state라면 컴포넌트가 리렌더링될 떄 classList.toggle처럼 행동한다.


3. Styled Components 소개
현재 import 'css 주소'를 사용하여 스타일을 적용시킨것은 해당 컴포넌트에 css 파일이 국한된다는 말은 아니다.
해당 css 파일의 class, id, tag 구문이 import 하지 않은 다른 컴포넌트에 해당할 경우 그 컴포넌트도 적용이 된다.
=> 의도치 않은 작동이다.

styled Components는 특정 스타일이 첨부된 컴포넌트를 구축할 수 있도록 도와주는 패키지이다.
스타일이 첨부되는 컴포넌트에만 영향을 미치고 다른 컴포넌트에는 전혀 영향을 미치지 않는다.

styled components 사용 방법
1. npm install styled-components
2. import styled from 'styled-components'
3. const 컴포넌트이름 = styled.컴포넌트``;

백틱안에 css 구문을 넣고 button을 반환하면 해당 컴포넌트를 사용하는 컴포넌트에서 button css의 class는 독립적인 이름을 갖게 된다.

`` 태그드 템플릿 구문을 사용한 것이다.

ex) const Button = styled.button``; => button은 styled 객체의 메서드이다. styled는 import된 객체이고 button은 메서드이다. 이렇게 작성하면 button 메서드를 호출하는 것과 마찬가지이다.
=> 백틱안에 쓰여진 css 구문의 선택자들은 자동으로 button을 가르킨다.
=> &은 button를 참조한다.
=> 이렇게 만들어서 사용되면 각 elements에 할당된 className은 styled에 의해 고유하게 설정된다.


4. Styled Components & 동적 Props
styled 컴포넌트에 props를 추가해서 백틱안에서 그 props를 사용할 수 있다.
=> 쉽게 동적으로 css를 처리할 수 있다.

스타일 컴포넌트에 props를 전달하고 해당되는 css 구문을 찾아서 ${(props)=>{...}}를 사용한다.
props는 스타일 컴포넌트의 모든 props를 가지고 있다.


5. CSS 모듈 사용하기
리액트 프로젝트는 CSS 모듈을 지원하도록 설정이 되어있다.

CSS 모듈 import 하는 방법
=> import styles from 'css 파일.module.css';
=> 기존의 css 파일은 파일명.module.css로 rename해야 한다.
=> 이를 className의 JSX 표현식에 넣어야 한다. styled.button처럼
=> elements에서는 이를 컴포넌트명_클래스명_고유한 해시값으로 class 값을 보유한다.
=> css 모듈의 핵심적인 작업은 css 이름을 고유하게 만드는 것이다.






































