1. 리액트 Context 소개
Props의 데이터를 끌어올려 필요한 컴포넌트에서 데이터를 줄 때 애플리케이션이 방대하다면 매우 번거로운 작업이다.
=> 이를 해결하기 위해 state 저장소라는 리액트 컨텍스트 API라고 한다.


2. 리액트 컨텍스트 API 사용
리액트 내부적으로 state 관리할 수 있도록 해주는 것이다.
=> 리액트 내부 데이터 저장소이다. state 뿐만 아니라 일반 데이터도 저장가능
프롭 체인을 구축하지 않아도 어떤 컴포넌트에서든 데이터를 저장하고 사용한다.

const AuthContext = react.createContext({...}) => 컨텍스트 객체를 생성한다.
export default AuthContext; => 생성된 객체를 내보낸다.
=> 이 객체를 사용하고 싶다면 사용할 컴포넌트를 감싸줘야 한다. 이를 공급한다고 한다.
=> <AuthContext.Provider>.....</AuthContext.Provider>

위처럼 감싸면 감싼 내부의 컴포넌트들, 자식과 자손들은 해당 컨텍스트에 접근할 수 있다.
리액트 컨텍스트도 react.Fragment처럼 사용할 수 있다.

값에 접근하려면 리스닝을 해야 한다. 두 가지 방법이 존재한다.
=> <AuthContext.Consumer>

ex) <AuthContext.Consumer>
   {(ctx)=>{
   return 기존의 JSX를 return 하는 코드
}}
</AuthContext.Consumer>
=> 기존의 JSX를 return 하는 코드에 ctx를 통해 리액트 컨텍스트 데이터에 접근할 수 있다.

동적인 값을 받고 싶다면 <AuthContext.Provider value = {isValid : isValid}>
=> ctx.isValid

이제 Consumer에서 가져오는 값들은 동적으로 가져온다. state가 변경되면 그 상태를 고려하고 가져온다는 것이다.

=> 이제는 프롭체인할 필요없이 Consumer를 통해 내려주면 된다.


3. useContext 훅으로 컨텍스트에 탭핑하기
useContext를 사용해서 Consumer를 매우 간편하게 사용할 수 있다.
Consumer의 코드를 구성하지 않고 const ctx = UseContext(컨텍스트 JS 파일);
=> ctx를 통해 컨텍스트에 접근할 수 있다.

=> 매우 효율적이고 실용적인 방법이다.


4. 사용자 정의 컨텍스트 제공자 구성요소 빌드 및 사용
useContext를 사용해서 동적인 값을 가져올 때는 비주얼 코드가 인식하지 못한다.
=> 기본 Context 객체에서 동적인 키 : Dummy를 넣어주면 알아서 인식한다.


5. 리액트 컨텍스트 제한
매우 빈번한 변화가 있는 데이터들을 처리하는데 최적화되지 않았다.


6. Hooks의 규칙
6-1. 리액트 훅은 리액트 컴포넌트 함수에서 호출해야 한다. (or 커스텀 훅스에서만)
6-2. 리액트 훅은 리액트 컴포넌트 함수 또는 사용자 정의 훅 함수의 최상위 수준에서만 호출해야 한다. 즉, 중첩 함수에서 훅을 호출하면 안된다. block 문에서 호출하면 안된다. => 전역 수준에서만 사용할 수 있다.
6-3. useEffect()는 항상 참조하는 모든 항목을 의존성으로 useEffect() 내부에 추가해야 한다. 그렇게 하지 않을 합당할 이유가 없다면.. 
useReducer, useState에 의해 노출된 state 업데이트 함수는 변경되지 않도록 리액트가 보장한다. => useEffect()의 의존성 추가할 필요가 없다. 


7. 입력 컴포넌트 리팩토링
=> props/ 데이터 전달 <Input>


8. Forward Ref's
UseRef()를 통해 focus 메서드를 호출할 수 있다. => inputRef.current.focus()
focus 메서드는 인풋 DOM 객체에서 사용가능하다.

사용자 지정 컴포넌트의 속성으로 ref는 ref를 받아들이지 않는다.

useImperativeHandle => 컴포넌트나 컴포넌트 내부에서 오는 기능들을 명령적으로 사용할 수 있게 해준다.

컴포넌트의 매개변수로 props 다음으로 ref를 받을 수 있다.

React.forwordRef, useImperativeHandle를 사용하면 리액트 컴포넌트에서 온 기능을 노출하여 부모 컴포넌트에 연결한 다음, 부모 컴포넌트 안에서 참조를 통해 그 컴포넌트를 사용하고 기능을 트리거할 수 있다.






** React Context
1. <context.provider value={...}>를 설정하면 받는 데이터들은 기본 데이터에 접근하지 못한다.
=> 동적으로 설정하면 받지 못한다.
2. <context.Provider>로 데이터를 전달해줄 컴포넌트를 감싸고 데이터를 사용할 컴포넌트에서 useContext를 사용해서 JSX 표현식 내에서 사용한다.
3. value={}를 통해서 전달할 때는 state 전달이 가능하고 상태가 끌어올려진다.
4. APP 전체를 기준으로 데이터를 전달하거나 state, useEffect 관리를 하려면 index.js app를 <AuthContextProvider>로 감싼다. 그 return 값은 .provider 이기 때문에 기본값을 참조하지 않고 value만 참조한다. 다만 useContext()의 인자는 react.createContext()를 받은 변수명이다. => 이제 필요한 곳에서 useContext를 사용해서 사용하면 된다.


props.children => 공통적인 데이터를 갖거나 가지고 싶을 떄 사용한다.
props.children를 구현하는 컴포넌트는 이를 사용자 지정 컴포넌트에서 사용할 떄 <Card className, type, data={}>
등을 props로 가져올 수 있다. => 그 가져온 데이터를 재구축하여 내려줄 수 도 있다.
ex) react-11 리턴값으로 AuthContextProvider를 보면 value를 통해서 값을 생성한다. => 이에 접근할 수 있다. => 재국축이 가능하다.


























