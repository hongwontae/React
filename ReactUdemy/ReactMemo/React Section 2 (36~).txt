1. 컴포넌트란?
컴포넌트는 재사용이 가능한 HTML, CSS, JS 로직이 조합된 것을 의미한다.

컴포넌트를 채택한 이유는 재사용성과 코드을 분리할 수 있기 떄문이다. 모든 언어에서 반복은 피하는 것이 좋고 코드를 분리하면 코드 베이스를 작고 관리가 수월해진다.

=> 컴포넌트의 특징은 재사용성과 코드 분리가 특징이다.


2. 선언적 방식
리액트는 재사용이 가능하고 반응성 있는 컴포넌트를 만들 수 있다.
=> 이러한 컴포넌트를 만들기 위해 선언형 접근법을 사용한다. 최종 상태를 정의한다는 뜻이다.
=> 바닐라 JS처럼 HTML를 요소를 만들거나 특정한 요소에 삽입하려는 지시를 하지 않는다는 것이다.


3. 새로운 React Project Start
=> npx creat-react-app 파일이름
=> 기존의 React 데모를 다운 받고 package.json이 있는 곳에서 npm install
=> 브라우저 React 웹 앱을 사용한다.


4. 표준 리액트 프로젝트 분석하기
01-starting-setup의 React Project를 기준으로 분석

React는 JS코드로 이루어져 있다. (HTML,CSS)
npm 프로세스가 React 문법을 파악해서 브라우저에게 알려주는 것이다.
=> 일반적으로 바닐라 JS에서 허용되지 않는 문법을 React에서 사용하는데 이 기능이 사용되는 이유는 브라우저로 전달되기 전에 변환도기 때문이다.

./src/index.js => 페이지가 로딩될 떄마다 실제로 맨 처음으로 실행되는 코드 파일이다.
package.json의 react-dom과 react 두 의존성이 함께 리액트 라이브러리를 구성한다.
react-dom과 react로부터 import를 한다면 그것은 react 기능을 사용하는 것이다.

import ReactDOM from 'react-dom/client'
const root = ReactDOM.createRoot() => 리액트로 만들려는 사용자 인터페이스의 기본 진입점 혹은 메인 훅이 생성된다. 즉,사용자 인터페이스가 로딩되었을 떄 웹페이지가 어디에 배치되어야 하는지 리액트에게 알려준다.
(React에게 우리의 시작점은 여기야!! 라고 말하는 것과 같다.)

public의 index.html
=> 브라우저가 로딩하게 될 유일한 HTML 파일이다. React는 SPA(Single Page Application)이기 때문이다.
=> index.html의 <div id="root"></div> 안에 개발자가 만든 사용자 인터페이스가 렌더링된다.

root.render(<App/>)
=> <div id="root">에 서 무엇을 렌더링해야 하는지 리액트에게 알려준다.
=> App이 렌더링되는 것이다.

import 할 떄 JS파일이나 써드 파티 라이브러리는 확장자를 뺴지만 CSS 파일은 확장자를 넣어야 한다.

* ./ => 같은 레벨에서 해당 파일을 찾으라는 뜻이다.

export 할떄는 default 키워드를 사용해서 모든것을 준다.


5. JSX 소개 and transCode
JSX는 자바스크립트 안에 있는 HTML 코드를 의미한다. JSX(JavaScript XML), HTML = XML
=> JSX 문법이 적용되는 이유는 npm 프로세스가 배후에서 브라우저 친화적인 코드로 변환하고 제공하기 때문이다.
=> 개발자 도구 - sources - static/js에 변환된 파일이 존재한다. 개발자가 만든 코드, react/react-dom 라이브러리 소스 코드를 포함하고 있다.


6. 리액트 작동 방식
바닐라 JS는 querySeletor, createElement, .textContent를 이용해서 접근한다. => 모든 걸 다 정의해야 한다.
React는 JSX 문법을 사용해서 상태를 정의한다. => 선언형 접근법


7. 첫 번쨰 사용자 정의 컴포넌트 구축하기
React는 분리와 재사용을 목적으로 많은 컴포넌트를 생성한다. 수백개가 될 수 도 있다.
App.js는 root 파일이기 때문에 많은 코드를 넣는 것은 비효율적이다.
App.js안에 다른 컴포넌트들이 내장되는 것이 효율적이고 가시성이 좋다. => 컴포넌트 트리 형태를 이룬다.

파일이름은 첫 글자가 대문자로 작성된 카멜케이스 규칙을 지켜줘야 한다. => React 개발자 규약

컴포넌트는 자바스크립트의 함수이다. => 매우 중요하다.
컴포넌트는 자바스크립트의 함수이고 JSX를 return한다.
function의 이름은 파일이름과 같아야 한다. => 이 때도 카멜케이스를 사용한다.

각자의 컴포넌트들은 App에서 사용되기 떄문에 export default 파일이름;를 통해서 건네준다.
App.js는 컴포넌트들은 import해서 HTML 태그처럼 사용한다. => export 파일의 return 값이 태그 값이다.
HTML 태그로 사용될 떄는 항상 첫 문자가 대문자인 카멜케이스 형식을 지켜줘야 한다. 
=> Syntax이다. 이래야 React가 사용자 지정 컴포넌트인것을 감지한다. 소문자는 일반적인 html 태그로 인식한다.








































