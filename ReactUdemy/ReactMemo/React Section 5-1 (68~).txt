1. Listening for events and working with event handlers
리액트에서 이벤트를 수신하는 방법
=> JSX에서 특별한 프로퍼티를 추가한다.
=> Html의 속성으로 이벤트를 수신한다.
=> 모든 HTML 요소는 지원되는 이벤트 리스너를 추가할 수 있다.
=> DOM이 생성될 떄 해당 이벤트를 수신할 수 있는 프로퍼티들이 만들어진다.
=> HTML의 속성으로 이벤트 작성할 떄 onClick처럼 on은 소문자 다음 첫 문자는 대문자이다.
=> 이벤트 핸들러의 함수는 Handler라고 변수명을 정해주면 명확해진다.

HTML의 on속성은 이벤트가 발생되면 이벤트 핸들러가 작동한다.


2. How component functions are executed
props로 받은 값을 변수에 할당하고 이벤트 핸들러를 통해 click이 되면 변수에
 할당된 이름이 바뀌면서 화면에 출력되게 하는 것은 일반적인 방법으로는 불가능하다.
=> 해당 함수의 호출로는 리액트가 특정 컴포넌트를 재평가하지 않는다.

컴포넌트는 일반적인 함수이다. 단지 jsx를 리턴할 뿐이다. 호출한 적이 없다.
JSX 코드에서 사용자 지정 태그(컴포넌트)를 사용함으로써 리액트에게 컴포넌트 함수를 알려준 것이다.
JSX코드를 평가할 떄마다 리액트는 해당 컴포넌트를 호출한다. 이후 해당 사용자 지정 컴포넌트 JSX를 평가한다.
=> 계속 이렇게 나아가서 평가할게 없을 때까지 지속한다.
그 다음 전체 결과를 다시 평가하고 그 결과를 DOM 명령으로 전환하고 화면에 렌더링된다. 
이후 리액트는 단순한 명령으로는 이 행위를 반복하지 않는다. => 특정 컴포넌트가 재평가되어야 한다고 알려줘야 한다.


3. Working with the state
단순히 변수가 바뀌는 행위로는 해당 컴포넌트를 재평가하지 않는다.

useState
리액트 라이브러리가 제공하는 함수이다.
값을 상태로 정의할 수 있도록 해주어 값에 변화가 생기면 다시 호출되는 컴포넌트 함수에 반영이 된다.

ustState 함수를 사용할 떄는 컴포넌트 함수 안에서 사용해야 한다. 또한 중첩 함수 안에서 호출도 불가능하다.
useState은 리액트 훅이라고 불리며 훅은 앞에 use라고 붙는다.

const [title, setTitle] = useState(초기값);
=> useState의 반환은 두 개의 요소를 가진 배열이다. 그렇기 떄문에 구조 분해 할당으로 값을 받아올 수 있다.
=> 첫 번쨰 요소는 현재의 상태값이다.  두 번쨰 요소는 그것을 업데이트하는 함수이다.

두 번쨰 요소의 함수는 메모리에서 리액트에 의해 관리되는데 이 함수가 호출할 떄 새 값을 수신하고 상태가 변하면 해당 컴포넌트를 재평가한다.
=> 재평가할 떄 해당 컴포넌트 함수를 다시 실행하고 해당 JSX 코드도 다시 평가한다. 
=> 상태 업데이트 함수를 호출하면 값을 즉시 바꾸지 않고 상태 업데이트를 예약한다. => console.log()가 바로 적용안되는 것이 그 예이다.
































