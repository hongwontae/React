1. 첫 번쨰 연습 프로젝트 및 작업

1-1. 여러 개의 컴포넌트로 분할한다.
1-2. 이벤트를 처리한다.
1-3. 상태를 관리한다.
1-4. 조건부로 데이터를 표시한다.
1-5. Styling


2. 앱을 컴포넌트로 분할하기
현재 App.js는 크게 3가지로 나뉠 수 있다. Header, Form, dataExpression
=> 컴포넌트 파일 안에서 3가지 폴더를 생성하고 위의 컴포넌트를 생성하고 APP.JS에서 import해서 사용한다.


3. 이벤트 처리하기
이벤트를 복합적으로 처리하기 위해 JSX 표현식에 화살표 함수를 사용한다.
ex) onChange = {(event)=>{inputHandler()}} => 이벤트가 발생하면 해당 JSX 표현식내의 함수가 실행되고 안쪽 함수도 실행된다. 이 떄 EVENT 객체를 활용하고 코드를 분리하기 위해 위의 방법을 사용하는 것이다.


4. 상태 관리하기
=> form 컴포넌트에서 state 관리를 해서 값을 제출하거나 입력값을 reset시킬 수 있다.

객체를 가져와서 ... 스프레드 연산자로 뿌려주고 다음 라인에서 같은 키를 사용하면 오버라이딩 된다.
인자로 받은 값을 키로 사용하고 싶다면 [key] : value로 사용하면 된다. [] => 객체에 키를 넣을 떄 동적으로 넣을 수 있다. 표현식을 넣거나 변수를 넣어도 된다.

reset를 위해서 setFunc()으로 초기값을 넣어주는 핸들러
userInput의 값을 받기 위해서 이전의 값들과 업데이트 한 값을 처리하는 prevState 콜백을 이용하는 핸들러
양방향 바인딩을 위해서 value 값을 userInput의 ['']값을 준다. 새로고침하면 이전 값으로 자동으로 간다.



5. 상태 올리기

5-1. App.js 컴포넌트에 상태를 올리기 위해서 app.js에서 func를 생성하고 props로 내려주고 데이터를 제출할 떄 내려준 함수를 실행하여 app.js에 데이터를 보낸다.

5-2. App.js에서 해당 데이터를 받는다. (함수의 매개변수로 받을 수 있다.) => 이 후 그 데이터를 state로 관리한다.

5-3. 만약 데이터가 변동되지 않은 채 온다면 app.js의 계산 로직이 작동할 필요가 없기 때문에 if check를 통해 데이터가 들어온 경우만 처리하도록 한다.


6. 조건에 따라 결과 출력하기

6-1. 하위 컴포넌트에서 상태 올리기를 통해 가져온 데이터를 데이터 표시 컴포넌트에 props로 내려준다.

6-2. 데이터를 표현할 JSX에서 JSX 표현식 내의 배열 map 메서드를 통해서 동적으로 표현한다.

6-3. Intl.NumberFormat 객체를 이용해서 표현된 JSX를 포맷한다.


7. CSS 모듈 추가하기

인라인 스타일 => <p style={{....}}></p>
=> style이란 props가 객체를 통해 CSS에 영향을 줄 수 있다.


8. 두 번쨰 Demo And 사용자 컴포넌트 추가하기
label의 속성으로 for은 사용할 수 없다. htmlfor로 사용해야 한다.
label의 for 속성 => input의 id와 label의 for 속성이 같은 이름이라면 라벨을 눌러도 input이 반응한다.
form 태그의 label, input, button(submit)으로 구성되어 있기에 preventDefault()를 사용했다.


9. 재사용 가능한 "카드" 컴포넌트 추가하기
감싸는 래퍼 클래스를 만들고 싶다면 => props.children를 활용하면 된다.
props.children은 JSX가 아니라 JS 표현식이다. props.children은 card 컴포넌트의 여닫는 태그 사이에 있는 컨텐츠를 준다.

현재 감싸는 래퍼 클래스는 내장된 HTML 컴포넌트가 아니다. 사용자 정의 컴포넌트이기 때문에 그 컴포넌트 안에서 사용하는 props를 통해서만 작동할 수 있다.

=> <Card></Card>처럼 감싸는 래퍼 클래스에 속성, Class, id를 주게 되면 적용되지 않는다.
=> 속성을 주고 싶다면 래퍼 클래스 자체에 주어야 한다.
=> Card 사용자 지정 래퍼 컴포넌트에 className을 할당하고 해당 컴포넌트에 가서 props.className를 통해 구현한다.
=> 래퍼 컴포넌트의 props에는 감싼 컴포넌트들의 정보가 담겨있기 때문이다.


10. 재사용 가능한 "Button" 컴포넌트 추가하기


























