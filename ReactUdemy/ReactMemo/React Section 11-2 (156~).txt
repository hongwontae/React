1. useReducer 및 Reducers 일반 소개
useReducer는 리액트 훅이고 state 관리를 도와준다.
useState를 통해 복잡한 state을 관리하면 오류가 나거나 버그가 생길 수 있다.
=> reducer를 사용해서 강력한 상태 관리를 할 수 있다.

Login Form은 useState를 사용해서 폼 state를 다루고 있다.
이렇게 다양한 state를 관리하고 하나의 state를 기반으로 다른 state를 업데이트 하면 오류나 버그의 확률이 증가한다는 것이다.

다른 state를 기반으로 하는 state를 업데이트하면 그 경우에는 하나의 state로 병합하는 것도 좋다.
=> useState의 두 번쨰 배열 값을 객체로 만든다.


2. useReducer() 훅 사용
useReducer도 항상 두 개의 값이 있는 배열을 반환한다. => 배열 구조분해를 사용할 수 있다.
반환되는 첫 번쨰 값은 최신 state 스냅샷이다. 두 번쨰 값은 업데이트 함수이다.

업데이트 함수는 새로운 state 값을 설정하는 대신 액션을 디스패치한다.
리액트는 새 액션이 디스패치될 떄마다 리듀서 함수를 호출한다.

useReducer는 서로 다른 state를 결합하기 위해 사용할 수 있다.

ex) const [emailState, dispatchEmail] = useReducer(()=>{})
reducer의 첫 번쨰 인수로는 함수를 받는다. 이 함수는 바같에서 규정할 수 있다.
컴포넌트 함수 밖에서 리듀서의 첫 번쨰 인자 함수를 명명하는데 그 이유는 리듀서 함수 내부에서는 컴포넌트 함수 내부에서 만들어진 어떤 데이터도 필요하지 않기 때문이다. 컴포넌트 함수 내부에서 정의된 어떤 것과 상호작용하지 않기 때문이다.

** useReducer
const [state, dispatch] = useReducer(reducer, initialState, init);
1. state => 컴포넌트에서 사용할 상태
2. dispatch => 첫 번쨰 인자인 reducer 함수를 실행시킨다. 컴포넌트 내에서 state 업데이트를 일으키기 위해 사용하는 함수이다.
3. reducer => 컴포넌트 외부에서 state를 업데이트 하는 함수이다. 현재 state, action 객체를 받아서 기존의 state를 대체하여 새로운 state를 반환하는 함수이다.
4. initialState => 초기 state
5. init => 초기 함수

dispatch 함수
=> reducer 함수를 실행 시킨다.
=> action 객체를 인자로 받으며 action 객체는 어떤 행동인지를 나타내는 type 속성과 해당 행동과 관련된 데이터(payload)를 담고 있다.
=> action을 이용하여 컴포넌트 내에서 state의 업데이트를 일으킨다.
=> state는 현 state들의 값을 가져오고 action은 dispatch 인자의 객체를 가져온다.



3. useReducer & useEffect
객체 구조 분해를 통해서 useReducer의 state들을 하나만 꺼낼 수 있다.

(setFunc()으로 state를 변경하면 동일한 데이터라도 변경이 되는 것이다.)
(useEffect의 의존성 배열은 값의 변동에 의해서 트리거 되는 것이다.)


Reducer Hooks는 여러 state를 관리할 수 있는 훅이다. => 초기값은 객체이고 하나의 key-value가 하나의 state이다.
이 떄 useEffect에서 의존성 배열을 트리거하여 함수를 실행시킬 때 reducer의 객체를 의존성 배열에 넣으면 불필요한 side Effect 효과를 남발 할 수 있다.
=> 이 때 객체 구조분해를 통해서 해결 할 수 있다.


4. State 관리를 위한 useReducer vs useState



















