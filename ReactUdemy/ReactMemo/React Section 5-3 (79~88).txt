1. 대안 : 공유 핸들러 함수 생성하기
이벤트 속성 = {(event)=>{공유Func()}}를 작성하면 이벤트가 발생할 떄마다 공유 Func이 작동한다.
=> 리액트에서 이벤트 핸들러의 매개변수는 event 하나만 전달된다. 나머지는 무시된다. 그러나 공유 Func은 매개변수를 자유롭게 줄 수 있다. 즉, 내가 원하는 로직대로 이벤트 핸들러를 작동시킬 수 있는 것이다.


2. 양식 제출 처리하기
button의 type이 submit이고 form 요소 안에서 클릭되면 form 요소 자체에서 이벤트를 발생시킨다.
=> 그 이벤트가 <form onSubmit = {}>이다.
=> 이 이벤트의 기본동작은 전송시 새로고침이다.

*** useState의 setFunc()으로 값을 변경하면 그 값은 initValue로 받는다. 다만 그 값은 console에는 즉시 처리되지 않는다.
컴포넌트를 재평가할 떄 위에서 아래로 읽기 떄문에 JS코드 읽고 JSX가 반환되기 때문이다.


3. 양방향 바인딩 추가하기

HTML input 속성
1. input의 type이 text나 password일 떄 value를 설정하면 초기 글자를 미리 입력해둘 수 있다.
2. 서버에 제출될 떄 value 속성이 전달된다.


























