1. 대안 : 공유 핸들러 함수 생성하기
이벤트 속성 = {(event)=>{공유Func()}}를 작성하면 이벤트가 발생할 떄마다 공유 Func이 작동한다.
=> 리액트에서 이벤트 핸들러의 매개변수는 event 하나만 전달된다. 나머지는 무시된다. 그러나 공유 Func은 매개변수를 자유롭게 줄 수 있다. 즉, 내가 원하는 로직대로 이벤트 핸들러를 작동시킬 수 있는 것이다.


2. 양식 제출 처리하기
button의 type이 submit이고 form 요소 안에서 클릭되면 form 요소 자체에서 이벤트를 발생시킨다.
=> 그 이벤트가 <form onSubmit = {}>이다.
=> 이 이벤트의 기본동작은 전송시 새로고침이다.

*** useState의 setFunc()으로 값을 변경하면 그 값은 initValue로 받는다. 다만 그 값은 console에는 즉시 처리되지 않는다.
컴포넌트를 재평가할 떄 위에서 아래로 읽기 떄문에 JS코드 읽고 JSX가 반환되기 때문이다.


3. 양방향 바인딩 추가하기

HTML input 속성
1. input의 type이 text나 password일 떄 value를 설정하면 초기 글자를 미리 입력해둘 수 있다. 
2. 서버에 제출될 떄 value 속성이 전달된다.

* input이 제출되면 input의 내용물을 지우고 싶다. => 제출할 떄의 이벤트에 setFunc('')를 작성한다. => input의 value는 초기값을 보여주는 것이기 떄문에 value={initValue}를 작성하면 제출될 떄마다 인풋의 내용물을 지워준다.
=> input의 값이 빈 문자열이라면 value 값을 보여준다.


4. 자식 - 부모 컴포넌트 통신 (상향식)
하위 컴포넌트에서 테이터를 수집하면 상위 컴포넌트에게 데이터를 전달할 필요가 있다.
(props는 부모와 자식 사이에서만 전달이 가능하고 중간 컴포넌트를 뛰어넘을 수 없다.)

1. 상위 컴포넌트에서 하위 컴포넌트 태그 속성을 지정한다.
2. 그 속성은 함수이며 함수만 넘긴다.
3. 하위 컴포넌트에서 상위 컴포넌트가 넘긴 함수가 호출되면 상위 컴포넌트에서 사용한 것처럼 데이터가 전달된다.
=> 하위에서 상위로 데이터가 전달된다.


5. 




























