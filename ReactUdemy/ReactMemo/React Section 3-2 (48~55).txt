1. props
바닐라 JS는 함수의 인자를 통해서 다양한 값을 반환할 수 있다. 
이와 마찬가지로 React에서는 props라는 개념으로 다양한 값을 반환하고 제어한다.

html 요소가 속성을 가질 수 있듯이 컴포넌트도 속성을 가질 수 있다. 이를 props라고 한다.
데이터를 내부에 저장하지 않고 외부 컴포넌트에서 받을 수 있는 개념이다.

JSX 내의 {}는 속성의 값을 정의할 떄도 사용할 수 있다.

1. 상위 컴포넌트에서 데이터를 정의한다. 대체로 배열과 객체를 사용해서 정의한다.
2. 이 후 props로 내려줄 사용자 지정 컴포넌트 태그에 속성값으로 키=값 형태로 작성한다.
3. 데이터를 받을 하위 컴포넌트는 사용자 지정 함수의 매개변수로 값을 받아온다. (값 이름은 마음대로지만 일반적으로 props로 받는다.)
4. console.log(props) => {키:값, 키:값...}
5. props.title, props.age 이런 형태로 해당 컴포넌트에서 사용한다.

=> props로 받아오는 값은 props : {키:값, 키:값, 키:값} 형태이다.
=> 사용자 지정 태그에 여러 props가 담기는 경우 하나의 객체에 담겨서 온다.

2. 컴포넌트를 여러 컴포넌트로 분할하기
다수의 props를 속성값으로 보내는 것이 아니라 전체 데이터 포인트를 전달할 수 있다.
=> 일일이 모든 배열이나 객체에 접근해서 보내는 것보다 하나의 포인트만 보내고 데이터를 받는 하위 컴포넌트에서 좀 더 많은 코드를 작성하는 것이다.

즉, props를 전달할 떄는 두 가지 방식이 존재한다. 데이터들을 하나씩 보내는 방법과 전체 데이터 포인트를 보내는 방식이다.

하위 컴포넌트에서 props를 받을 때 객체구조분해를 통해서 (let a = {title:hwt, age:20}) => let {title, age} = a;) 받을 수 있다. 


3. 컴포넌트에 바닐라 자바스크립트 로직 추가하기
날짜를 표시하는 하위 컴포넌트의 JSX가 date.toIsoString이기 때문에 읽기 어렵게 반환된다.
=> 수정해보자

date.toLocaleString() => 읽기 쉬운 날짜로 반환해주는 메서드이다.
date.getFullYear() => 날짜에서 연도를 반환하는 메서드이다.

JSX내의 {} 표현식을 넣을 떄는 최대한 간결히 넣어줘야 한다.
=> return 위에 바닐라 JS 로직을 정리하는 곳에서 최대한 정리를 하고 표현식에는 변수만 넣어주는 것이 좋다.


4. props를 전달하고 받는 대안적 방법/ props 처리하기
컴포넌트 태그의 경우 중간에 컨텐츠가 없다면 종료태그 하나만 써도 된다.

import하여 태그를 사용하는 컴포넌트가 부모 컴포넌트가 되고 import를 당한 컴포넌트는 자식 컴포넌트가 된다.
이렇게 되면 props를 통해 데이터를 보내줄 수 있다.

css를 import하는 방법은 import './css 파일.css';이다.


5. 연습하기 : 리액트 및 컴포넌트 기본 사항
props를 속성으로 건네줄 떄 여러개를 건네주면 {} 형태로 전달되게 된다.

props - key - data 형식으로 값을 받아오는데 객체 구조 분해 할당을 이용하면 key - data로 접근할 수 있게 되는 것이다.



6. 컴포지션의 개념
작은 구성요소부터 시작해서 사용자 인터페이스를 구축하는 방식을 컴포지션이라고 한다.

Card.js => 일반적으로 모서리가 둥글고 그림자 효과가 있고 컨테이너 외관을 의미할 떄 Card라는 말을 많이 사용한다.

Expense 컨텐츠를 둘러싸는 껍질 역할하는 컴포넌트를 생성할 수 있다. 즉 재사용 가능한 래퍼 컴포넌트를 생성할 수 있다.
컴포넌트를 생성하고(Card.js) 그 컴포넌트를 root 컴포넌트로써 다른 컴포넌트를 감싼다면
=> <Card><div>....<div></Card>
=> 단순히 이렇게 사용하면 리액트가 래퍼 컴포넌트라고 인식하지 못하고 안에 있는 컴포넌트들을 무시해버린다.

props.children => 
import './Card.css';

function Card(props){
    return <div className = "card">{props.children}</div>
}
export default Card;
=> children은 예약어이다. 이 값은 항상 사용자 지정 컴포넌트의 시작 태그와 종료 태그 사이에 있는 콘텐츠가 된다.
=> 래퍼 컴포넌트는 props로 className과 children이란 이름의 배열을 얻을 수 있다. children키는 래퍼 컴포넌트로 감싼 컴포넌트의 data가 담겨있다.

=> 이후 복잡한 사용자 인터페이스를 만들면 중복되는 코드를 만나는데 이 떄 props.children로직으로 많은 중복을 피할 수 있다.




























