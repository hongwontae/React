1. 리덕스
상태 관리 리액트 라이브러리를 리덕스라고 한다. => 데이터 관리 라이브러리

상태를 세가지로 나눌 수 있다.
1-1. Local State
=> 한 컴포넌트에서 상태가 사용되는 것을 의미한다.
1-2. Cross-Component State
=> 여러 컴포넌트에서 상태가 사용되는 것을 의미한다.
=> ex) Props Chain
1-3. App-Wide-State
=> 어플리케이션 전체에서 상태가 사용되는 것을 의미한다.
=> user authentication
=> props Chain, props driling

리액트 컨텍스트를 사용해서 크로스 컴포넌트/ 앱 와이드 상태를 구현할 수 있다.

리덕스도 위처럼 행동할 수 있다.


2. Redux VS React Context
리액트 컨텍스트는 단점이 존재한다.
2-1. 컨텍스트를 사용하면 설정이 복잡해지고 관리가 어려워진다.
=> 매우 중첩된 JSX가 등장하게 된다. 최상위 루트 컴포넌트에서 JSX를 감싸야 하기 떄문에..
=> 그렇다고 하나의 파일에 state 관리를 해놓으면 너무 비대해진다.
2-2. 컨텍스트를 사용하면 의도치않은 재평가로 성능저하가 일어날 수 있다.
=> 컨텍스트의 state가 변경되면 컨텍스트를 구현한 모든 컴포넌트가 자동으로 재평가가 된다.


3. Redux 작동방식
리덕스는 central Data(state) Stroe이다. 하나의 저장소를 갖는다. 하나의 저장소에 모든 state 관리를 한다.
=> 저장소를 직접 구현하지 않는다.

컴포넌트는 저장소의 데이터를 직접 변경하지 않는다. ReducerFunc은 일반함수이고 이를 통해 데이터를 조작한다.
컴포넌트가 액션을 보낸다. 해당 액션은 리듀서로 전달된다. (원하는 작업에 설명을 리듀서에 전달)

Redux 저장소는 컴포넌트를 바라보고 있다. 이 방향을 역으로 설정될 순 없다.
3-1. 리덕스가 데이터를 컴포넌트에 내려주고 컴포넌트가 이를 사용한다.
3-2. 컴포넌트가 데이터를 변경하여 UI를 수정하고 싶다면 Action 객체를 사용한다.
3-3. 액션 객체는 ReducerFunc를 트리거해서 새로운 상태를 리덕스 저장소에 뱉어낸다.
3-4. 상태가 변경되면 리덕스 저장소가 컴포넌트에게 알린다.

*** 저장소가 컴포넌트를 바라보는 것을 구독한다라고 한다.


4. Redux Concepts
저장소-리듀서 함수 - 액션 - 컴포넌트(저장소를 구독하기 위한 설정 코드) 4가지가 필요하다. => Node에서 구현

const store = redux.createStore() => 리덕스 저장소를 생성한다.
저장소의 데이터를 액션이 보내지고 리듀서 함수에 의해 조작된다.
저장소와 연결된 것은 리듀서 Func이기 떄문에 저장소는 리듀서 함수를 알고 있어야 한다. => 매개변수로 reducerFunc을 알아야 한다.

ReducerFunc()
=> 매개변수로 기존 상태와 발송된 액션을 가진다.
=> 새로운 상태를 리턴한다. (대부분 객체형식을 가진다.)/ 기존의 상태를 대체한다.
=> 순수한 함수가 되어야 한다. 
=> 부수효과 x
=> 리덕스 라이브러리에 의해 호출된다.

컴포넌트(저장소를 구독할 것)
일반 함수를 구독 공간으로 만듬 => 구독하는 곳에서는 store.getState() => getState는 생성된 저장소에서 최신 상태 스냅샷을 제공한다. 

store.subscribe((  )=>{  }) => 저장소-컴포넌트 연결/ 데이터가 변동되었을 떄 전달해준다.
store.dispatch(...) => 액션을 보내야 리듀서가 반응한다. 

reducer는 dispatch를 하지 않아도 한 번 실행한다. => 그렇기에 초기값이 중요하다. 없으면 오류를 뱉기 떄문이다.


5. action을 통해 리듀서Func에서 로직을 단단이 갖출 수 있다.


6. redux는 JS언어로 구동되는 환경에서는 사용가능하다. React 국한x
npm install redux + React와 저장소를 쉽게 구독하기 위해 react-redux를 install


7. React+Redux 바인딩
데이터를 사용할 컴포넌트는 Redux store에 접근할 수 있어야 한다.
앱 전반에 데이터를 전달하려면 최상단 index.js(app.js가 render)된 곳에서 바인딩처리를 한다.

7-1. import {Provider} from 'react-redux'
7-2. import store from 'stor path'
7-3. root.render(<Provider store={store}><App /><Provider>);
=>이제 모든 컴포넌트들이 구독할 수 있고 액션을 보낼 수 있게된다.


8. useSelector()
react-redux의 훅이다. 컴포넌트 구독 관계를 자동으로 맺어주고 해당 JSX가 제거되면 구독이 사라진다.

useSelector()의 인자에 함수를 넣어야 한다. => 해당 함수는 react-redux가 실행한다.
=> 인자는 redux에서 관리중인 state를 가져온다. => state는 대부분 객체화되어 부분적으로 나뉘어져 있다.

useSelector(state => {
  return state.counter
})
=> 콜백함수의 인자에는 가져올 state/ return을 통해 일부분만 가져온다.


9. useDispatch()
const dispatch = useDispatch(); => dispatch를 해주는 함수이다.
dispatch({type : 'ADD'}) => reducerFunc을 트리거한다./ useSelector가 있다면 자동 구독 관계라 데이터 변동 사항이 DOM에 적용된다.


10 . dispatch(actions)
=> actions를 통해 동적인 인자를 reducer에 보낸다.


11. Reducer State
reducer의 state 부분을 다양하게 설정할 수 있다. => 이 떄 인자가 복잡해지지 않도록 따로 뺴준다.

버튼 클릭으로 dom을 toggle 처리하려면 toggle:!state.toggle를 return해주면 된다.


12. Redux State 불변
Reducer 함수의 return이 setFunc이라고 생각하면 된다.
=> 그렇기 떄문에 return 되는 값/상태/객체는 기존의 state를 변경하면 안된다. => 변경을 트리거하지 못하기 떄문이다.


13. Redux Toolkit
Redux를 사용할 떄 단점이 존재한다
13-1. actions/ state가 복잡해지고 다양해지면 코드가 비대해진다.
13-2. 13-1의 상태가 되면 의도치 않게 기존의 데이터를 변경하는 실수를 저지른다.
13-3. 새로운 상태를 주어야 하기 떄문에 state가 증가하면 return 되는 객체가 쓸데없이 커진다.

=> 위의 문제점을 해결하기 위해 redux-toolkit이 존재한다.

































