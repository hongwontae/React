1. 리덕스
상태 관리 리액트 라이브러리를 리덕스라고 한다. => 데이터 관리 라이브러리

상태를 세가지로 나눌 수 있다.
1-1. Local State
=> 한 컴포넌트에서 상태가 사용되는 것을 의미한다.
1-2. Cross-Component State
=> 여러 컴포넌트에서 상태가 사용되는 것을 의미한다.
=> ex) Props Chain
1-3. App-Wide-State
=> 어플리케이션 전체에서 상태가 사용되는 것을 의미한다.
=> user authentication
=> props Chain, props driling

리액트 컨텍스트를 사용해서 크로스 컴포넌트/ 앱 와이드 상태를 구현할 수 있다.

리덕스도 위처럼 행동할 수 있다.


2. Redux VS React Context
리액트 컨텍스트는 단점이 존재한다.
2-1. 컨텍스트를 사용하면 설정이 복잡해지고 관리가 어려워진다.
=> 매우 중첩된 JSX가 등장하게 된다. 최상위 루트 컴포넌트에서 JSX를 감싸야 하기 떄문에..
=> 그렇다고 하나의 파일에 state 관리를 해놓으면 너무 비대해진다.
2-2. 컨텍스트를 사용하면 의도치않은 재평가로 성능저하가 일어날 수 있다.
=> 컨텍스트의 state가 변경되면 컨텍스트를 구현한 모든 컴포넌트가 자동으로 재평가가 된다.


3. Redux 작동방식
리덕스는 central Data(state) Stroe이다. 하나의 저장소를 갖는다. 하나의 저장소에 모든 state 관리를 한다.
=> 전체 저장소를 직접 구현하지 않는다.

Redux 저장소는 컴포넌트를 바라보고 있다. 이 방향을 역으로 설정될 순 없다.
3-1. 리덕스가 데이터를 컴포넌트에 내려주고 컴포넌트가 이를 사용한다.
3-2. 컴포넌트가 데이터를 변경하여 UI를 수정하고 싶다면 Action 객체를 사용한다.
3-3. 액션 객체는 ReducerFunc를 트리거해서 새로운 상태를 리덕스 저장소에 뱉어낸다.
3-4. 상태가 변경되면 리덕스 저장소가 컴포넌트에게 알린다.
























