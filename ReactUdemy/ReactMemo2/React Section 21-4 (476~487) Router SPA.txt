1. action
데이터를 전송하기 위해 리액트 라우터는 action이 존재한다.
Form => 리액트 라우터 라이브러리의 tag => 기본값을 막고 해당 데이터를 action으로 전해준다.

action은 리액트 라우터에 의해 실행되고 인자로 객체를 받는다. 
{request, params} => params은 파라미터(동적 세그먼트)/ request은 Form 데이터가 포함되어 있다.

const data = request.formData()를 통해 받을 수 있다.
=> title = data.get('title') => get('input name')을 통해 얻을 수 있다.

redirect => Router 라이브러리의 함수/ 리다이렉션한다./ redirect('/events') 


2. action trigger
2-1. Form을 사용한다. (현재 활성인 라우트의 action() 함수를 자동으로 트리거한다.)
Form의 action 프로퍼티에 다른 라우트 경로를 적으면 다른 라우터 정의 객체의 action이 실행된다.

2-2. useSubmit()
=> const submit = useSubmit({},)
=> 첫 인자는 객체 데이터(폼 데이터 객체가 된다), 두 번쨰 인자는 설정 값
=> 이 컴포넌트가 속한 라우트와 같거나 해당 컴포넌트가 렌더링되는 라우트와 같은 라우터에서 정의된다.
=> 함수가 호출되면 action을 트리거한다.
=> useSubmit이 호출되면 action 인자 객체 request에 submit(...) 인자 값을 준다.


3. useNavigation
const navi = useNavigation()
navi.state === 'submitting' => action => navi.state
라우트 => 라우트 과정 정보 획득가능


4. loader의 데이터를 라우터 컴포넌트에 가져올 수 있는 것처럼 action도 가능하다.
useActionData();

(action이나 loader의 데이터를 받는 곳은 해당 라우트 + 해당 라우트 중첩된 JSX)


5. Action -- RouterCom
action(request, params)
=> request는 라우터의 데이터가 전송되면 해당 데이터 + 부가정보가 들어간다.


6. 



















