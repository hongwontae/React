1. action
데이터를 전송하기 위해 리액트 라우터는 action이 존재한다.
Form => 리액트 라우터 라이브러리의 tag => 기본값을 막고 해당 데이터를 action으로 전해준다.

action은 리액트 라우터에 의해 실행되고 인자로 객체를 받는다. 
{request, params} => params은 파라미터(동적 세그먼트)/ request은 Form 데이터가 포함되어 있다.

const data = request.formData()를 통해 받을 수 있다.
=> title = data.get('title') => get('input name')을 통해 얻을 수 있다.

redirect => Router 라이브러리의 함수/ 리다이렉션한다./ redirect('/events') 

(path - Com 연결, action : pcAction => 연결된 Com의 하위 Form이 제출되도 action이 트리거된다.)


2. action trigger
2-1. Form을 사용한다. (현재 활성인 라우트의 action() 함수를 자동으로 트리거한다.)
Form의 action 프로퍼티에 다른 라우트 경로를 적으면 다른 라우터 정의 객체의 action이 실행된다. => 기존의 action 무시

2-2. useSubmit()
=> const submit = useSubmit({},)
=> 첫 인자는 객체 데이터(폼 데이터 객체가 된다), 두 번쨰 인자는 설정 값
=> 이 컴포넌트가 속한 라우트와 같거나 해당 컴포넌트가 렌더링되는 라우트와 같은 라우터에서 정의된다.
=> 함수가 호출되면 action을 트리거한다.
=> useSubmit이 호출되면 action 인자 객체 request에 submit(...) 인자 값을 준다.

(action({request, params}) => request는 요청 데이터 객체 + 요청 데이터에 관한 정보/ params는 동적 세그먼트)


3. useNavigation
const navi = useNavigation()
navi.state === 'submitting' => action => navi.state
라우트 => 라우트 과정 정보 획득가능
트리거된 액션이 전송 중 === 'submitting'


4. loader의 데이터를 라우터 컴포넌트에 가져올 수 있는 것처럼 action도 가능하다.
useActionData(); => action이 호출되면 return 객체를 가져올 수 있는 훅

(action이나 loader의 데이터를 받는 곳은 해당 라우트 + 해당 라우트 중첩된 JSX)


5. Action -- RouterCom
action(request, params)
=> request는 라우터의 데이터가 전송되면 해당 데이터 + 부가정보가 들어간다.
=> request.method는 모두 대문자로 치환되어 저장된다.
=> 라우터 객체 정의에서 loader를 설정한 것은 해당 라우터 path의 element로 가기 전에 실행하는 함수이다.
=> 라우터 객체 정의에서 action을 설정한 것은 해당 라우터에서 Form 전송이나 useSubmit이 트리거 되었을 떄이다.


6. useFetcher();
const fetcher = useFetch();
fetcher.Form/ <fetcher.Form> => 라우트 전환을 시작하지 않는다. 액션이나 loader를 트리거하지만 이동하지 않는다.

action의 숨겨진 동작
{path/ element/ action} => 해당 element가 아닌 곳에서 Form + action props으로 action을 가져오면 해당 action을 가지고 있는 곳으로 포워딩된다. => 이를 막는 것이 fetcher.Form

fetcher의 목적은 loader나 action을 할 떄 라우트 전환을 하지않고 함수를 실행시키는 것이다.

const {data, state} = fetcher
data => action이나 loader data
state => idle, submitting, loading


7. defer()
data 로딩 연기 => data가 오지 않아도 layout 처리를 하고 싶을 떄
리액트 라우터에게 데이터가 오지 않아도 컴포넌트를 미리 렌더링하라고 명령 가능

7-1. loader()를 통해 get 데이터를 불러오는 경우가 많다. => 라우터 가기 전에 실행 => 해당 데이터가 복잡해서 늦게 온다고 가정 
7-2. function loader(){defet({events : 기존로더()})}
7-3. 기존 로더는 이제 Promise와 정제된 데이터를 가져와야한다.
7-4. useLoaderData()를 통해 defer 데이터를 가져온다. const {events} = useLoaderData()
7-5. <Await> import <Susense> import
7-6 <Suspnese fallback={<p><p>}><Await resolve={events}>{(data)=>{return <com props={data}}></com>}}</Await> </Suspense>
=> Suspense가 데이터가 오기 전까지 기다리고 데이터가 도착하면 Com이 렌더링된다.


8.  defer data Control




















