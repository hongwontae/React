1. 작성한 리액트 코드는 방문자의 브라우저에서 실행된다. => 방문자들이 해당 코드에 접속하거나 볼 수 있다.


위의 사항을 방지하기 위해 프론트 엔드가 직접적으로 보안이나 DB를 연결해서는 안된다. 프론트 엔드는 백엔드와 연결되는 형식을 갖춰야 하고 백엔드에서 보안이나 db 처리를 해줘야 한다. 이 떄 프론트와 백엔드의 소통을 HTTP 요청이라고 한다.


2. fetch
HTTP 요청을 해주는 JS 브라우저 함수
=> JS에서 사용하는 것처럼 데이터를 받아와서 set를 사용하면 무한루프가 발생한다.
=> useEffect를 사용하면 된다.


3. Fetch And useEffect
useEffect(()=>{fetch('http://localhost:3000/places').then(data=>{
	return data.json(); => json 데이터를 JS 객체로 바꾸는 방법
}).then(resData => {
	return setFunc(resData.places) => state 변경
})},[])
=> 의존성 배열이 없기 때문에 Mount 되고나서 한 번만 실행


4. useEffect 내에서 async/await
useEffet의 콜백함수에 async를 붙이면 오류가 발생한다. => 리액트가 받아들이지 않는다.
=> useEffect 내에서 함수 선언문을 작성하고 그 함수에 async/await 구문을 사용하고 함수를 호출하면 된다.


5. HTTP 에러
요청 실패(http 주소 에러) or 백엔드 로직 문제
async와 await를 사용했을 떄의 에러처리는 try-catch를 사용하면 된다. => 함수 내에서 try-catch 구문을 사용

일반적으로 HTTP 요청을 사용할 때는 상태를 3개를 다룬다. 하나는 데이터 상태, 두 번쨰는 에러 상태, 세 번쨰는 폴백 상태
=> 각 상황에 맞게 setFunc을 사용하면 된다.

useEffect 내에서 setFunc이 실행되면 useEffect도 다시 실행되는 것이 아니다. 


6. 콜스택 High
콜백함수를 사용했을 떄 그것이 동기든 비동기든 외부 코드 라인으로 이동한다. 
ex) add(()=>{} setFunc()...)
    if(){}...
=> add의 콜백함수는 add가 실행되어야 실행되지만 그 함수 자체는 실행된 것이기 떄문에 밑의 코드로 간다.
=> 실행속도가 빠르지 않으면 올바르지 않은 값이 반환될 수 있다.


























