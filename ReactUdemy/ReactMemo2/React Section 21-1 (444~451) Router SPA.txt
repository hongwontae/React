1. 백엔드 요청을 통해 새로운 페이지를 가져온다. => 기존의 방식
URL를 통제하여 다양한 페이지로 포워딩할 수 있다. => React Router


2. Routing
웹 사이트를 방문하면 도메인에 경로를 첨부할 수 있다./ 다른 경로를 첨부하면 컨텐츠가 변경된다.
=> URL 경로가 다르면, 다른 컨텐츠가 화면에 로딩되는 효과 => 라우팅

React Router가 아닌 다른 전통적인 백엔드 통신으로 페이지를 가져오면 성능의 저하가 올 수 있다. => 사용자 경험 저하

React는 SPA이다. => 요청 시에 SPA를 내려준다. => 라우터를 사용 (URL을 감시한다) => 다른 URL이 트리거되면 visible Contents가 보여진다. (다른 리액트 컴포넌트를 보여준다.)


3. npm install react-router-dom => 리액트 라우터 기능 설치

라우터를 사용하려면 세 가지를 정의해야 한다.
3-1. URL과 경로에 따른 컴포넌트 로딩 정의
3-2. 라우터 활성화
3-3. 컴포넌트 확인, 페이지들 간에 이동할 수단 제공했는지 확인


4. 라우터 정의하기
도메인 뒤에 있는 부분을 경로라고 한다.

해당 리액트 프로그램이 라우터를 사용한다고 알리기 위해서 =>
루트 컴포넌트(App.js)의 return에 RouterProvider를 사용한다.
Provider의 router 키의 value로 경로와 JSX가 매칭된 값을 준다.
return (<RouterProvider router={router}></RouterProvider>)

createBrowserRouter => react-router-dom 라이브러리의 함수이다. 이 함수를 통해 경로와 해당되는 JSX를 매칭시킨다.

const router = createBrowserRouter([ {...}, {....}, {....}]) => 배열 안에 객체를 통해 라우터를 정의한다.

{path: '/'} => 경로를 정의한다.
{path : '/', element : <HomePage/>} => element => 해당 경로가 반환할 컨텐츠를 정의한다. (JSX를 정의한다. 사용자 지정 컴포넌트를 지정한다. 그러나 일반 JSX도 정의된다.)


5. 라우터 정의하기 - 2

const routerDefine = createRoutesFromElements(
  <Route>
    <Route path="/" element={<Home></Home>}></Route>
    <Route path="/products" element={<Product></Product>}></Route>
  </Route>
)

const router2 = createBrowserRouter(routerDefine) => router2를 provider의 router 키에 value로 준다. 

=> createRoutesFromElements, Route를 react-router-dom에서 가져온다.
=> createRoutesFromElements() <Router>로 덮고 <Router>로 정의한다.
=> 정의한 함수를 변수에 할당하고 createBrowserRouter의 인자로 넣고 변수에 할당하고 router키에 value에 넣는다.
=> 1의 방식과 똑같이 동작한다.
=> 과거의 방식이다.


6. Link로 페이지 이동하기
<a>를 통해서 링크를 구축하면 새로고침을 통해 컨텐츠를 제공한다.
=> 이면에서 리액트 서버에 SPA를 다시 요청하여 가져온다. => 큰 성능저하
=> 다시 JSX를 로딩하여 가져오면 상태나 이전 데이터를 잃는다. => 에러 OR 버그

<Link></Link>
=> 해당 링크 요소에 대한 클릭을 감시하고 링크를 클릭했을 떄 HTTP 요청을 전송하는 브라우저의 기본 설정을 막아준다.
=> 대신 라우터 정의를 확인하여 그에 맞춰 페이지를 업데이트하고 적절한 컨텐츠를 로딩한다.


7. 레이아웃 및 중첩된 라우트
createBrowserRouter의 배열안의 객체를 통해 라우터를 정의하는 것이다. One By one

모든 것을 감싸는 레이아웃 페이지를 만들고 싶다면?
=> 객체의 children 속성을 이용하자
=> children prop을 정의하면 정의된 라우트들은 원하는 레이아웃을 가지게 된다.

[{path : '/', element : <Layout/>
  children : [
	{path : 'home', element : <Home/>},
	{path: 'product', element : <Product/>}
]
}]
=> Layout 컴포넌트는 import { Outlet } from "react-router-dom";를 가져와서 <Outlet></Outlet>를 반환한다.
=> Outlet은 children을 표현한다.





































