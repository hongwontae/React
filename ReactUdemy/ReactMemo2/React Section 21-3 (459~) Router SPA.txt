1. 동적 세그먼트와 충돌되는 path는 구체적인 path가 우위에 있다.
ex) /product/:productId vs /product/new
=> new라는 path도 :/productId에 해당하지만 리액트 라우터는 /product/new path 라우터를 우선시한다. => 구체적인 것을 우선시한다.

(children이 구현되면 부모의 path가 자식의 path의 포함되어야 하고 부모 컴포넌트에 Outlet이 포함되어야 한다.)
(index:true => 부모 라우트의 path와 자식 라우트의 path가 일치해서 같이 보여준다는 것)


2. loader() 데이터 가져오기

loader 
=> 라우터를 정의하는 객체의 키이다. 값으로 함수를 받는다.
=> 해당 라우터를 방문하기 직전에 리액트 라우터는 loader 함수를 실행한다.
=> loader 함수를 통해 데이터를 로딩하고 가져올 수 있다.
=> 함수의 return 값은 해당 라우터 객체의 element가 얻을 수 있다.


3. loader() 데이터 사용
loader 메서드를 실행한 결과물을 element가 가져오기 위해 useLoaderData을 import한다.
const data = useLoaderData(); => 가장 가까운 loader return 값을 가져온다.
<Component events={data}/> => 데이터를 prop로 넘겨준다.


4. loader() 데이터의 다양한 활용법
loader 함수를 정의하고 useLoaderData를 사용해서 데이터를 얻을 수 있다.
=> 그렇다면 모든 라우터에 데이터을 얻을 수 있는가?

=> 상위 레벨의 라우터는 하위 레벨의 라우터의 loader에 접근할 수 없다.
=> 같은 레벨이나 하위 레벨은 loader에 접근할 수 있다.


5. loader() 코드를 저장하는 위치
라우터를 정의하는 객체가 loader 키를 갖고 있지만 데이터를 가져오는 로직을 구성하다보면 난잡한 코드가 된다.
=> 해결하기 위해 loader가 사용되는 컴포넌트에 export async function loader(){...}를 구성하고 import 해서 사용한다.
=> 위의 방식은 권장되는 방식이다.


6. loader() 함수가 실행되는 시기
path의 컴포넌트가 실행되기 전에 loader()가 실행된다.

라우터 트리거 => loader() => loader()의 데이터로 component Rendering

=> backend node.js에서 get data를 1.5초 지연시킨다. => loader()가 트리거 되는 라우트를 트리거한다. => loader()가 1.5초 뒤에 데이터를 얻기 때문에 전 페이지에 1.5초 머물고 => 1.5초 끝나면 트리거 되는 라우터에서 data를 가지고 렌더링한다.


7. loader() 데이터 확인
loader가 트리거 되는 라우트 이전의 라우트에서 loader()가 어떤 상태를 지니고 있는지 확인할 수 있다.
const navigation = useNavigation();
navigation.state => 세 가지 문자열을 가지고 있다. 'loading' => 데이터를 기다리고 있음


8. loader() 데이터 반환
useLoaderData() => new Response()로 만든 데이터를 받을 수 있다.
fetch를 통해 얻는 데이터는 Promise이다. => Response?? //9
=> 별다른 조치하지 않고 바로 보내서 사용할 수 있다. useLoaderData()의 기능 덕분에
=> useLoaderData는 Response 객체를 인식하여 가져올 수 있다.

=> async의 함수 호출 결과값은 Promise이다. => useLoaderData()를 사용하면 resolve 값이 부여된다.
=> fetch를 사용해서 값을 가져오면 Promise가 이행된 값이 떨어지고 Response 객체가 useLoaderData()의 변수에 할당된다.


9. fetch and Response
fetch의 통신의 결과는 Promise 객체이다.
=> Promise 객체의 resolve는 Response 객체를 return한다.
=> fetch의 통신의 결과는 Promise화 된 Response 객체이다.
=> promise 자체는 객체이다. 객체 상태에서 then이나 catch 처리를 한다.
=> Response 객체는 fetchAPI의 결과 객체라고 생각하면 된다.


10. loader 에러 처리
단순히 return {....}를 통해 처리할 수 도 있다.

loader에서 throw를 던지면 리액트 라우터는 errorElement를 찾아서 반환한다.
=> errorElement는 자신의 라우트 객체의 errorElement을 우선적으로 찾고 없으면 상위요소를 찾는다.
=> errorElement는 path 실패, loader throw에 반응한다.

useLoaderData() => Response 객체를 loader에서 retrun하면 자동으로 body 값을 가져온다. => json도 해줘서 유용하다.
useRouteError() => loader의 에러가 처리되었을 떄/ path 경로가 올바르지 않을 경우 관련된 data를 가져온다.
loader일 경우 일반 객체를 보낼 수 도 있고 Response 객체를 보낼 수 도 있다. => Response 객체를 보내는 경우가 흔하다.
Respose로 데이터를 보내려면 초기에는 JSON 형태이기 떄문에 이를 지켜줘야 한다. status이나 다른 key와 useError와 연동하기 쉽다.
path 에러일 경우 일반적인 에러처럼 처리한다.


11. json()
=> react-router-dom의 함수이다.
=> Response 객체를 생성해준다.
=> Response를 보낼 떄 json 형식으로 보내고 error에서 받을 떄는 parse해야 한다. => json 함수는 이 과정을 알아서 처리한다.
=> throw json({message : '....'}, {status : 500})


12. 동적 loader
(Link의 동작은 앞에 /에 의존한다. /가 있다면 절대경로 취급하고 /없다면 상대경로로 취급하여 움직인다.)
loader 함수는 파라미터로 객체를 받을 수 있다. 객체는 두 가지 프로퍼티로 구성되어 있다. 하나는 response, 하나는 params
params는 동적 세그먼트를 가져올 수 있다.


13. 공용 loader 사용
부모가 loader를 가지고 있고 하위 레벨에서 loader를 사용하고 싶다면 부모 라우터에 id를 설정하고 하위 라우터 컴포넌트에서 useRouteLoaderData()를 사용한다. 그 훅의 인자로 부모 라우터의 id를 넣으면 된다.

(input의 defaultValue => React의 기능)

(동적 세그먼트와 일반 URL이 충돌한다면 구체적인 URL이 우선적으로 선택된다./ loader => 라우터 정의 객체의 키, 함수를 받는다. 함수의 결과값은 라우팅된 router가 취함/ loader 함수본문은 loader를 사용할 router component에서 작성한다./ useLoaderData()를 통해 loader 데이터 get/ 이전 라우터 => 다음 라우터로 감 => loader() => 다음 라우터/  useLoaderData()는 결과값을 가져올 떄 Response)

(Loader 에러 처리 throw를 던지면 errorElement를 찾는다. 같은 요소 or 부모 요소 errorElement find => error 라우터 component에서 에러처리 데이터를 받을 떄는 useRouteError로 가져온다. throw new Reponse JSON.stringify({})}, {status : 500} or json({}),{})
=> new Response일 떄는 body는 json 형태를 갖춰야 한다. json은 위의 일련의 행위를 알아서 해줘서 편하다.

(loader의 함수는 인자에 객체값으로 response, params가 들어온다.  응답객체, 동적세그먼트 객체)

(상위 loader를 사용하려면 상위 라우터에 id를 설정하고 useRouteLoader()를 설정하고 id 값을 인자로 주면 된다.)






























