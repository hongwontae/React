1. 리액트 쿼리 => tanStack 쿼리라고 한다,
HTTP 요청을 쉽게 해주는 라이브러리이다.


2. TanStack
=> Http 요청을 도와주고 백엔드와 프론트엔드의 동기화를 도와주는 라이브러리이다.
npm install @tanstack/react-query

useQuery()
=> HTTP를 전송하는 로직이 내장X/ 요청을 전송하는 코드는 직접 작성해야 한다.
=> 요청을 관리하는 로직 존재하는 것이다.

=> useQuery({queryFn : func})
=> queryFn 프로퍼티의 함수는 Promise를 반환해야 한다.

=> useQuery({queryKey : ['events'] })
=> 전송하는 모든 요청에는 쿼리키가 존재한다.
=> 쿼리 키를 이용해 요청으로 생성된 데이터를 캐시 처리한다.
=> 동일한 요청 => 응답 재사용
=> 프로퍼티의 값은 배열이고 내부적으로 저장한다.
=> 저장된 값은 데이터 재사용을 식별한다.
=> 배열의 값은 타입 구애를 받지 않는다.

useQuery의 인자로 객체를 받고 객체의 프로퍼티로 queryFn, queryKey를 받고 실행하면 객체가 할당된다.
=> 객체 구조 분해를 통해서 다양한 프로퍼티를 사용할 수 있다.

const {data, isPending, isError} = useQuery({....})
=> data => fn의 실행결과 데이터
=> isPending => 요청의 결과에 대해서 알려준다.
=> isError => queryFn 요청의 결과가 에러가 발생하고 throw를 던지면 isError가 true 값을 갖는다. 기본적으로는 false
=> error => error가 발생하면 그에 대한 데이터가 들어가 있다.

react query-useQuery를 사용하려면 해당 기능을 사용할 컴포넌트를 Tanstack 쿼리가 제공하는 특수한 프로바이더로 래핑해야 한다.

import {queryClient, queryClientProvider} from '@tanStack/react-query'

const queryClient = new QueryClient();

<QueryClientProvider client={queryClient}><RouterProvider router={router}></QueryClientProvider>
=> tanStack를 사용할 준비가 완료되었다.

tanStack를 사용하면 다른 웹페이지를 방문하고 tanStack 페이지를 방문하면 자동으로 tanStack의 queryFn이 실행된다.
=> 실시간 데이터 변동에 유용하다.

(useQuery queryFn(프로미스 반환하는 Http 요청 함수), queryKey(배열, 타입 구애x, 값으로 캐시 처리))
(useQuery {data(queryFn의 성공시 데이터), isPending(loading), isError(queryFn의 throw 처리시 true로 값 설정/ 기본값은 false), error(throw 던졌을 떄 에러 데이터)})
(tanstack 사용하기 위해 사용할 컴포넌트 덮어야 함 => queryClient, queryClientProvider
const queryClient = new QueryClient(); => <queryClientProvider client={queryClient}></queryClientProvider>
)


3. 캐시 처리
리액트 쿼리는 응답 데이터를 캐시 처리한다. => 나중에 동일한 쿼리 키를 가진 다른 useQuery가 실행되면 데이터를 재사용한다. => 데이터를 즉시 제공한다. => 동시에 내부적으로 요청을 다시 전송해서 업데이트 데이터가 있는지 확인
=> 업데이트 데이터 존재하면 {data}를 자체적으로 교체한다. => 업데이트 데이터가 화면에 표시된다.

useQuery({staleTime : })
=> 캐시에 데이터가 있을 떄 업데이트 데이터를 가져오기 위한 요청을 자체적으로 전송하기 전에 기다릴 시간을 설정하는 프로퍼티이다.
=> 불필요한 요청 전송을 방지할 수 있다.
=> staleTime : 5000(밀리초/ 5초)
=> useQueyr({staleTime : 5000}) => 다른 페이지에 5초 동안 머물지 않고 다시 돌아오면 요청하지 않는다.
=> 기본값은 0이다.


useQuery({gcTime : })
=> 가비지 수집 시간을 의미한다.
=> 데이터와 캐시를 얼마나 오랫동안 보관할지를 제어한다.
=> 기본값은 5분이다.















































