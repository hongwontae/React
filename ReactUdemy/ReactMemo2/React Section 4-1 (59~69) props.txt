React-3-Start 프로젝트에 해당 개념 있다.(React Section4의 내용이지만 또 다운로드 시간 걸려서 React-3에 기반함)


1. 빌드 프로세스에 의해 JSX가 브라우저 친화적인 코드로 변환되고 최적화된다. 
이 빌드 프로세스를 거치지 않아도 구동되는 리액트도 존재한다. => React.createElement을 사용해서 html 요소를 만들고 반환하면 된다. => 과거 리액트 사용법이다. 빌드 프로세스가 JSX를 해석하지 않았기 때문이다.


2. JSX가 반환될 떄 하나의 루트 요소만 반환되어야 한다. => 바닐라 JS return이 두 개면 오류가 발생한다.
이를 해결하기 위해 React.Fragment/ <></>(빈 태그)를 사용하면 된다.

import {Fragmnet} from 'react'; => react 라이브러리에서 Fragment만 따온 것이다.


3. 하나의 상태로 여러 개의 변화를 일으키는 것은 잘못된 데이터 변동이 발생할 가능성이 높다.
  부모 컴포넌트가 재평가되면 자식 컴포넌트도 재평가된다.


4. 컴포넌트를 분리했다.
useState를 사용한 컴포넌트가 set이 호출되면 리렌더링의 시작이다.


5. props.children과 props 속성을 이용해서 Wrapper 컴포넌트를 사용할 수 있다.
=> 각 Wrapper 속성에 다른 개념을 부여하는 방법이 존재한다.


6. props 속성을 이용해서 데이터를 건네주고 받을 떄 rest 연산자를 통해 받을 수 있다. (이 때는 배열에 존재한다.)
=> 함수 내부에서 spread 연산자를 사용해서 객체 원본을 받는다. => 그대로 사용한다.


7. props로 커스텀 컴포넌트를 건네줄 수 있다. props로 넘겨준 커스텀 컴포넌트의 props를 설정할 수 있다.
=> setFunc()을 props의 props로 넘겨줘도 상태를 관리하는 주체는 useState를 명시한 곳이다.
=> 그곳부터 재평가가 이루어진다. 내려줘도 상관없다.


8. props로 내려준 값을 컴포넌트로써 사용할 수 있다. 해당 컴포넌트는 내장 컴포넌트(일반 HTML)로써 사용될 수 도 있고 커스텀 컴포넌트로 사용될 수 도 있다.
props로 내려줄 떄 문자열로 내려주면 내장 컴포넌트로 사용되고, props로 내려줄 떄 props={Section} 이렇게 컴포넌트 포인터만 내려주면 커스텀 컴포넌트가 된다.
=> 높은 재사용성을 위해서 구축하는 코드이다.


10. 객체 구조 분해에서 기본값을 부여할 수 있다. {title = 'A lucky boys'} => 자식 컴포넌트에서 props를 받을 떄 기본값 설정을 통해 유연한 코드 작성을 할 수 있다.


*** React는 커스텀 컴포넌트와 내장 컴포넌트의 차이를 첫 글자 UpperCase로 구분하는데 이 규칙이 엄격하다.
=> Props로 넘겨준 키가 소문자이면 하위 컴포넌트에서 사용했을 떄 들어먹지 않는다.

*** ...data => 하위 컴포넌트한테 이렇게 넘겨줄 수 있다. 받을 떄는 props/{...props}를 통해 받는다. 

























