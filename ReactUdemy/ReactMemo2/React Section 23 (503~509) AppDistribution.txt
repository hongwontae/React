1. 개발 => 프로덕션 => 리액트 애플리케이션이 전 세계에 공유된다.


2. 배포 단계
2-1. Test Code
2-2. Optimize Code
2-3. Build App for Production => 빌드 프로세스를 이용해서 앱을 자동으로 최적화한다.
2-4. Upload Production Code to Server
2-5. Configure Server


3. 지연 로딩
특정 코드를 필요할 떄만 로딩하는 테그닉을 의미한다.

import 문이 처리되어야 파일을 읽고 처리한다.
간단한 애플리케이션이면 성능 차이가 나지 않지만 복잡한 애플리케이션에서 import문을 전부 처리하고 실행하면 첫 페이지 로딩이 느려진다. => 성능 저하

지연 로딩의 목적 => 특정 컴포넌트를 특정 시기에 불러오는 것/ 필요할 떄만 가져오는 것


4. Production 코드 빌드
=> 작성한 모든 코드들이 무수한 브라우저에서 지원되는 것은 아니다. => 최종사용자가 쓸 수 있는 코드로 변환 필요

npm run build => 최적화된 변환 코드 번들이 생성된다.
=> 명령을 실행하면 build라는 폴더명으로 여러개의 파일들이 생성된다.
=> 가독성은 좋지 않지만 유효한 코드이고 최적화된 코드들이다.


5. 배포 예시
리액트 코드는 브라우저에서 파싱하고 방문자의 컴퓨터에서 실행된다.
=> 정적 웹사이트 호스트를 사용하면 된다.
=> 일반 React SPA는 서버 호스트 필요없다.


6. 서버 측 라우팅 및 필요한 환경설정
Hosting 할 떄 SPA 여부가 중요하다. => 다른 URL를 사용하면 라우트 전환이 된다. => 브라우저에서 실행한다.

브라우저 URL를 통해 요청을 전달하면 서버에서는 요청에 대해서 판단한다. => 존재하거나 인증되는 요청이면 응답을 내린다.

SPA로 설정하면 무조건 index.html을 반환하도록 환경설정된다. URL에 어떤 경로가 붙건 index.html/ 동일한 JS파일
=> 서버측 라우팅이 아닌 클라이언트 라우팅을 사용하도록 설정하는 것
=> 서버측 라우팅은 동일한 파일을 반환하지 않는다.
=> 애플리케이션을 서버에 배포하는 것이다. 과거의 애플리케이션은 서버가 html/css/js를 가지고 있었다. => 서버 통신 새로운 페이지 => React는 SPA 하나의 페이지 => 다르다.


 

















