1. 하위 컴포넌트의 상태값이나 일반 값을 상위 컴포넌트로 가져오기 위해서는 업데이트 함수를 내려준다. 이를 prop Drilling이라고 한다.


2. props로 데이터가 넘어가는 순간 => props = {keyName : data} 형식을 갖추게 된다. => 무조건이다.
=> 객체 구조 분해 const {keyName} = props => keyName은 data를 바로 가지게 된다.
=> React에서는 {keyName}만 해도 위의 로직이 실행되게 한 것이다.


3. prop Drilling이 비대해질 떄 해결방법 중 하나는 Components composition이다. (컴포넌트 합성)
분리해논 컴포넌트를 하나로 합쳐서 direct로 props를 주는 것이다.
=> 하나의 컴포넌트가 비대해지기 떄문에 추천하지 않는다.


4. useContext => 컨텍스트라는 값에 상태를 저장하면 모든 컴포넌트에서 상태를 사용할 수 있다.


5. const context = CreateContext(....)
=> Context를 만드는 기본 문법이다. createContext는 데이터를 저장하는 컨텍스트를 생성하고 변수에 저장한다.
저장되는 값은 배열, 객체, 문자열, 숫자 etc... 아무거나 가능하다.

이를 사용할 컴포넌트는 <Context.Provider><Header><Header/><Context.Provider/>처럼 감싸줘야 한다.
=> Header는 컨텍스트를 사용할 수 있다. Context는 Provider 프로퍼티로 인해 컴포넌트가 된다.

*** APP 컴포넌트에서 context로 덮으면 모든 컴포넌트가 사용가능하다. => header를 덮었는데 header component는 다른 것도 컴포넌트로 표현해도 context 범위내에 있는 것이다.


6. 일반적인 컨텍스트 연결과 일반값의 연결
위의 5의 작업을 하면 감싸진 컴포넌트들은 컨텍스트 데이터 접근이 가능하다.
1. 컨텍스트 데이터를 사용할 컴포넌트에서 컨텍스트 파일과 useContext를 불러온다.
2. const context = useContext(ContextFile); => context 변수에 컨텍스트 데이터가 저장되어 있다.
3. 2의 변수에는 컨텍스트 파일의 데이터가 있는 것이 아니라 컴포넌트를 덮을 떄 사용한 컴포넌트의 value가 저장되어 있다.
4. 그렇기 때문에 컨텍스트 파일의 데이터, 컨텍스트를 사용할 파일을 덮은 컴포넌트 value에 데이터가 존재해야 한다.
=>  컨텍스트 데이터는 자동완성 기능을 주기 떄문에 편리하다.
5. 데이터를 사용하면 된다.


7. <Context.Consumer>
=> Context.Provider의 값을 가져오기 위한 두 번쨰 방법이다.
=> 첫 번쨰 방법은 createContext로 만든 객체를 import + useContext를 사용하는 방법/ 두 번쨰는 Consumer이다.

=> Context 값을 가져오기 위한 컴포넌트에서 JSX를 <Context.Consumer>로 덮는다.
=> JSX 표현식으로 함수를 작성하고 return에 기존의 JSX를 집어넣는다.
=> 함수의 매개변수는 Provider에 값에 접근할 수 있다.


8. 컴포넌트에서 useContext 훅을 사용하여 값에 연결되면 해당 컴포넌트는 재평가를 한다.
=> Context 값이 변경되면 해당 값을 가지고 있는 컴포넌트는 재평가가 된다.


9.  App 컴포넌트에서 구현된 Context 로직을 Context 파일에 이전하기
9-1. App 컴포넌트의 함수, 변수, 상태를 모두 잘라낸다.
9-2. 일반 컴포넌트를 생성하고 잘라낸 로직을 붙여넣고 children을 가져온다.
9-3. 변수, 함수, 상태 등을 객체화한다.
9-4. 다음으로 이렇게 구현한다. <CartContext.Provider value={ctxValue}>{children}<...>
=> CartContext.Provider의 컴포넌트의 ctxValue를 사용하는 로직은 동일하게 하고 내부에 children을 구현하는 방식이다.
=> 잘 생각해보면 다를게 없다. 다만 옮겨놓을 뿐이다.

















































