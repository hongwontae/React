1. 동적 쿼리 함수 및 쿼리 키

쿼리 파라미터 동적 로직/  쿼리 키가 같다면 충돌한다.
=> 같은 쿼리 키를 사용하면 먼저 트리거된 queryFn의 queryKey가 우선이다.
=> 이 떄 queryKey가 같다면 다른 queryFn을 사용하더라고 먼저 트리거된 queryFn을 사용한다.

키를 동적으로 생성하면 다양한 캐시 데이터를 구성할 수 있다.
(동적이란 것은 다르다는 것)

 useQuery는 마운트 되었을 떄 자동으로 함수가 실행된다./ 쿼리 키가 같으면 아예 처음부터 http 요청이 하나만 전송되고 해당 데이터를 캐시처리하고 staleTime에 따라 하나만 http 요청이 전송된다./ 쿼리 키가 변경되면 useQuery 함수가 트리거 되어 queryFn이 실행된다.


2. 쿼리 구성 및 객체 및 요청 취소
useQuery의 queryFn은 http를 구성하는 함수에 자동으로 객체를 보낸다.
=> queryFn : (obj) => {
	return fetchEvent(obj, startTerm)
}
obj = {meta : '', signal : ..., queryKey : ['events']}

queryFn : fetchEvent
=> 이렇게 그냥 보낼 떄는 자동으로 queryParameter가 전송된다. meta, queryKey, signal(요청을 취소할 떄 사용하는 객체)


3. enabled => ture면 queryFn 활성화/ false면 queryFn 비활성화
(State와 Input의 상관관계 => useState의 초기값이 비워져 있다면 초기값은 undefined이다. input에 이를 할당하고 input을 보내면 그 값은 undefined이다. 하지만 input에 무엇가를 적고 다 지우면 그 값은 undefined가 아니라 빈 문자열이다.)

isPending => queryFn이 enabled의 false에 의해 비활성화 상태이면 isPending은 true 값을 갖는다.
isLoading => 쿼리 비활성화가 되도 ture 값을 가지지 않는다. 단지 데이터 상황에만 의거한다.


4. useMutaion
useMutation => 데이터 POST에 적합한 훅/ 요청을 임의적으로 보낼 수 있다. => mutate을 통해 함수의 호출시점을 정할 수 있기 떄문이다.

const {mutate, isPending, isError, error} = useMutation({
	mutationFn : createNewEvent
})
=> mutate는 mutationFn을 트리거한다.

=> isPending => 요청이 전송중이면 true, 그렇지 않으면 false
=> isError => 에러 Boolean
=> error => 에러 객체


5. onSuccess => mutate가 성공한 이후에만 트리거되는 useMutation인자의 프로퍼티

** navigate로 이동한다하더라도 해당 컴포넌트가 리렌더링되는 것이 아니다.


6. queryClient.invalidateQueries({queryKey : ['events'], exact : true})
=> 해당 함수가 호출되었을 떄 이전의 쿼리로 데이터가 표시된 경우 만료시키고 다시 데이터를 가져오는 함수를 호출하라고 하는 것
=> queryKey의 배열의 값에 해당하는 이전 쿼리들의 데이터만 만료하고 가져와라. 이 떄 'events' 값만 존재하거나 'events'와 다른 키를 가지고 있는 쿼리 함수도 포함한다.
=> exact : true => Invalid queryKey에 정확히 해당하는 것만 트리거시켜라
































