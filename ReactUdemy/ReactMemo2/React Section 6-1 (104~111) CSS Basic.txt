1. vite 빌드 프로세스는 jsx 파일이나 js파일에서 import CSS 파일을 import하면 index.html의 style로써 주입되게 한다.
=> 하나의 CSS 파일만 사용가능한 것이 아니라 여러개로 분할해도 된다.
=> 단지 import 'css path.css'를 하면 된다.


2. 1의 방식대로 CSS를 사용한다면 CSS 범위가 scoping 되지 않는다. 하나의 컴포넌트 파일에 import 하더라도 vite 빌드 프로세스가 별 다른 조치 없이 style 태그를 추가하기 때문이다. => css가 적용되는 방식이 import 되자마자 적용되고 그 css 파일은 적용안되는 파일이 되는 게 아니라 일단 가지고 있다고 빌드가 되면 전체 다 가져와서 주입시키는 방식이다.


3. import 'css Path.css' => 컴포넌트에 종속되는게 아니다.


4. <p style={{color : 'red'}}><p/> => 모든 내장 컴포넌트는 style이라는 속성을 가지고 있다. 이를 인라인 속성이라고 한다. => 해당 내장 컴포넌트를 대상으로 CSS를 적용하는 것이고 우선 순위가 제일 높다.

style 속성은 객체를 값으로 받기 때문에 JSX 표현식 {}의 객체를 사용한다.
객체의 KEY는 일반적으로 그냥 사용하면 되지만 text-align 같은 속성은 JS 키 값으로 받지 못한다. => textAlign 같이 카멜케이스를 지켜줘서 사용하면 된다. or 'text-align' : 'left' 이렇게 사용해도 된다. 

객체의 값은 String이다.

=> 인라인의 단점은 JSX의 무결성을 해치고 CSS의 최우선사항이란 것이다.


5. inline으로 동적으로 CSS를 적용시키기 위해 객체의 값을 삼항연산자로 채울 수 있다.


6. JSX의 ClassName의 값은 항상 문자열이어야 한다.
className를 동적으로 설정하기 위해서 백틱안에 js 표현식을 넣는 방법과 JSX 표현식을 이용하는 방법이 있다.

ex) <label className={`label ${emailNotValid ? 'invalid' : ''}`}>Email</label>

ex) <label className={'label '+ (emailNotValid ? 'invalid' : '')}>Password</label>


7. CSS Module
=> 기본적으로 리액트 빌드 프로세스에서 갖추고 있는 기능이다.
=> cssName.module.css인 파일이름으로 css를 설정하고 컴포넌트에서 import classes from 'path.module.css'한다.
=> class와 id는 해당 컴포넌트 스코프에 고정된다.

=> 빌드 프로세스에 의해 className = {classes.class}과 module.css는 완전히 다른 이름으로 바껴서 다른 컴포넌트들이 접근할 수 없다.

















