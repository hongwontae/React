1. input value => 기본값이자 input의 값


2. useRef()
=> 커스텀 컴포넌트, 내장 컴포넌트들을 참조 할 수 있게 해준다.
=> input 태그를 참조하고 싶다면 const input = useRef(); <input/ ref={input}> => input 변수는 input 태그를 참조한다.
=> input.current를 통해 input 객체에 도달할 수 있다.
=> setFunc()의 들어갈 값으로 input.current.value를 사용하면 된다. 


3.  refs는 값을 읽어들이거나 코드의 많은 양을 줄이거나 독립적인 위치에 존재할 떄는 사용해도 된다.
=> 다만 React의 목적은 state를 통해 값을 읽고 조종하는 것이기 떄문에 refs를 이용해서 값이나 DOM를 조작하는 행위는 자제해야 한다.


4. refs와 state의 차이
=> refs는 처음 렌더링되었을 떄 미연결 상태이다. 처음 렌더링하면 refs의 값을 모른다는 것이다.
=> refs의 변경은 컴포넌트 재평가를 야기시키지 못한다. state 변경이 컴포넌트 재평가를 일으킨다.

=> 컴포넌트 재실행은 컴포넌트 외부의 실행을 하지 않는다./ but 참조는 한다. (해당 컴포넌트 내부에 없네? 외부로 가보자.)


5.  변수가 컴포넌트 외부에서 선언되면 해당 컴포넌트 인스턴스들과 해당 변수가 공유된다.
=> 그렇기 떄문에 내부에 선언하는 것이다. 내부에서 선언한 변수, 상태는 인스턴스에 종속된다.

useRef()의 값은 재평가할 떄마다 데이터가 유실되지 않는다. => 유지된다.
=> 컴포넌트 내에서 일반적인 변수선언은 재평가마다 데이터가 초기화된다.


6. useRef의 값은 일반적인 방식으로 컴포넌트에 전달할 수 없다.
ref의 값을 다른 컴포넌트로 이동시키려면 forwardRef를 사용해야 한다. props를 통해 ref를 받는 컴포넌트가 forwardRef Hook를 import해서 함수 본문을 감싸야 한다. 그리고 두 번쨰 매개변수에서 ref를 받고 ref를 매칭할 태그에 ref={props.ref}를 사용하면 된다.

dialog 태그는 기본적으로는 보이지 않는다. => 속성 open를 통해 보이게 할 수 있다.
또한 DOM dialog의 showModal()를 통해 보이게 할 수 있다.
























