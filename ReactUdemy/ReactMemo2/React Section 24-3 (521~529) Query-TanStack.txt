1. refetchType => inValidateQueries의 인자 객체의 프로퍼티
=> queryKey에 해당하는 모든 useQuery을 무효화 시키고(캐시 데이터를 보여주지 말고) 다시 실행해서 가져와라
=> refetchType이라면 무효화한 시켜라


2. useParams => React-router-dom의 활성화된 라우트의 동적 세그먼트를 가져올 수 있는 훅이다.


3. 낙관적 업데이트
mutate를 사용하고 업데이트된 데이터를 즉시 식별하기 위해 invalidQueries를 사용하는 방법은 onSuccess 프로퍼티를 이용하기 떄문에 기다리는 동안 isPending를 통한 컴포넌트를 보여주고 업데이트된 데이터를 표현한다.
=> 좋은 방법이지만 다른 방법이 존재한다.

낙관적 업데이트 => 데이터를 편집하면 벡엔드의 응답이 오는 것을 기다리지 않고 먼저 수정한 다음 백엔드의 결과를 나중에 판단하여 수정하는 것 (put 백엔드 요청이 실패하면 롤백한다.)

onMutate => 함수가 값으로 필요하다. mutate 호출 즉시 실행된다. mutate 프로세스가 완료되기 전에, 응답을 받기 전에 실행된다./ mutate()의 인자가 onMutate 프로퍼티의 인자로 자동으로 들어간다.

내부적으로 저장된 캐시 데이터를 변경하고 UI에 적용시키는 방법이다.
=>qeuryClient : 쿼리와 상호작용하거나 캐시된 데이터를 조작하는데 사용하는 객체
=> queryClient.setQueryData() => 내부적으로 저장된 캐시 데이터를 불러오고 수정하는 메서드 => 인자는 두 개를 받는다. => 첫 번쨰 인자는 캐시 데이터에 해당하는 키, 두 번쨰 인자는 저장하려는 새 데이터이다.
(setQueryData => 쿼리를 실행하는가? 실행하지 않는다. 다만 캐시데이터를 보여준다.)
(쿼리키에 해당하는 queryFn의 결과값이 setDataQuery의 인자값으로 변경되는 것이다. 근데 이를 행하려면 해당 쿼리를 무효화를 시켜야 한다.)

queryClient.cancelQueries => 특정 키의 모든 활성 쿼리를 취소하는 것이다. 인자로 객체를 받고 취소하려는 queryKey를 설정한다. / Promise를 반환하는 비동기 함수이다.
(queryKey가 같은 useQuery의 queryFn은 첫 번쨰로 query가 발송된 캐시 데이터가 나간다. 근데 이를 무효화시키는 것이다. 왜? 낙관적 업데이트를 위해서 query를 내맘대로 해야되기 떄문이다.)
ex) queryClient.cancelQueries({queryKey : ['events', params.id]}) => 해당 키에 해당하는 쿼리가 나가는 경우 해당 쿼리가 취소되도록 할 수 있다. 

queryClient.getQueryData() => 인자에 쿼리키에 해당하는 쿼리 데이터를 가져온다.

onError => useMutation의 인자의 프로퍼티/ mutate의 에러 발생시 실행되는 함수
값으로 익명함수를 사용한다. 익명함수의 인자로 자동으로 error, data, context를 받을 수 있다.


4. ReactQuery + React-Router





















