1. useRef
=> React 훅이자 html 요소에 접근할 수 있다.
=> useRef()를 호출하여 변수에 할당하고 html 요소의 ref에 value로 집어넣으면 current 객체값을 통해 요소에 접근할 수 있다.
=> ref 값은 state 변경을 일으키지 못한다. => 컴포넌트 재평가를 일으키지 못한다.
=> ref 값은 컴포넌트 리렌더링 시 데이터가 초기화 되지 않는다. => 일반 값은 초기화된다. => 다시 읽어들이기 떄문이다.
=> useRef 값을 자식 컴포넌트로 넘길 떄 일반적인 방법으로 넘길 수 없다. useRef와 useForwardRef, useImperativeHandle을 사용해야 한다.

=> 부모 컴포넌트에서 ref값을 생성하고 사용자 컴포넌트의 ref 키에 값으로 넘긴다. 자식 컴포넌트에서 useForwardRef()를 호출하고 컴포넌트 함수 본문을 useForwardRef()로 덮는다. 그리고 컴포넌트 함수의 두 번쨰 인자값으로 ref를 받는다. 
=> 자식 컴포넌트에서 ref를 생성한다. 해당 ref 변수와 html 태그의 ref를 연결하고 useImperativeHandle를 호출한다.
=> useImperativeHandle(ref(props로 받은 ref), ()=>{
	return {
	메서드이름 : ()=>{ref(자식 컴포넌트 ref).current.method();}
}
})
useRef => 요소 참조 or 정적 값 설정
useForwardRef => ref를 넘겨줄 떄 자식 컴포넌트에서 사용되는 Hooks
useImperativeHandle => useForwardRef가 구현되고 자식 컴포넌트의 ref 조작값을 넘겨주는 Hooks


2. CreatePortal
react-dom에서 createPortal를 가져와서 JSX return 값을 감싼다. 첫 번쨰 인자는 JSX, 두 번쨰 인자는 렌더링할 요소



























