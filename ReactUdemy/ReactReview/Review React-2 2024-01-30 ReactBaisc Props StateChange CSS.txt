1. 컴포넌트 => Html+CSS+JS의 모임이다. 재사용성과 반복회피의 장점이 있다.

2. 직접 생성하여 만드는 컴포넌트를 사용자 지정 컴포넌트라고 한다. 또는 커스텀 컴포넌트
컴포넌트를 구현할 떄는 태그를 사용하고 태그를 하나만 사용해도 된다. <component
컴포넌트는 JSX를 return 해야한다.

3. index.html를 React가 내보내는 것이다. SPA이다. Single Page Application이다. 
index.jsx가 index.html의 id를 찾아서 루트 공간을 만들고 렌더링할 파일을 app으로 지정해놓는다.

4. jsx 표현식 => return 되는 JSX는 일반적으로 HTML이다. 중괄호를 사용해서 JS 표현식을 넣을 수 있다.

5. img => img를 import해서 src에 중괄호 표기법으로 집어넣으면 이미지가 들어간다. => String으로 불러오면 개발=>배포과정으로 거치면서 이미지가 꺠지거나 유실될 가능성이 있다. react가 배포과정에서 자동으로 최적화를 한다.

6.  props
컴포넌트 간에 데이터 통신 방법이다. 부모 컴포넌트가 자식 컴포넌트에게 데이터를 주는 단방향 통신이다.
key-value 형태로 전달된다. 
부모 컴포넌트에서 Spread 연산자를 통해 전달하고 자식 컴포넌트에서 ...props를 통해 받아서 손쉽게 사용할 수 있다.

7.  React 컴포넌트에 일반적인 방법으로 import 해서 사용하면 작동하지만 scope가 자유롭다.

8. DOM를 생성될 떄 JS와 상호작용할 수 있는 프로퍼티들이 생성된다. 그 중 이벤트가 존재한다. onClick..onBlur..onChange..

9. 훅들은 use라는 이름이 앞에 붙고 선언할 떄는 컴포넌트 안에서 선언하며 중첩함수에서 선언될 수 없다.

10. DOM Change는 React를 통해서만 가능하다. => DOM에 접근해서 변동시키면 알아먹지 못한다.
=> useState의 setFunc를 사용하는 방법이 일반적이다.

11. 동적인 반환 => 삼항연산자, &&, ||, map, filter을 사용한다. => 잘 조합해서 사용하면 사용자에게 좋은 효과를 준다.

12. 객체 구조 분해는 기본값과 alias를 줄 수 있다. let {key1, key2 : keySeconde, key3='Default Value"} = study;
(:는 alias이고 =는 기본값을 주는 것이다.)

13. 컴포넌트의 return 값은 한 개의 루트요소여만 한다.

14. props를 통해 데이터 뿐만 아니라 컴포넌트/ html를 건네줄 수 있다.
사용자 지정 컴포넌트를 보낼 때는 Key={<components></components>}를 보내고 받을 떄는 {Key}를 통해 사용할 수 있다.
=> key를 사용해야 value가 나오기 때문이다.
=> 이 떄 사용자 지정 컴포넌트는 대문자가 키여야 한다.

일반 html를 보낼 떄는 Key="li/ul/menu" 등으로 보내고 받을 떄는 <Key></Key>로 사용하면 된다.

15. 일반 폴더의 사진을 사용할 떄는 import imgName from 'path.확장자'를 사용한다. => 이는 리액트가 빌드 프로세스에 접근했을 떄 최적화되고 브라우저에 제공되기 전에 public 폴더에 들어간다. public 폴더의 사진은 빌드 프로세스에서 제외된다. 바로 사용되는 것이다. (사진이 정적으로 렌더링되면 public에서 바로 사용하는 것이 좋다. => 최적화 필요x)

16. setFunc은 이벤트 핸들러 안에서 batch 처리한다. 다만 setFunc의 콜백함수는 변경사항이 실행된 후 최신 값만 받아온다.

17. react에서 저장된 값을 함부러 바꾸면 오류가 발생한다. state 객체 상태값을 변경할 떄 ...를 사용하지 않고 변경한다면 기존의 상태값을 건들기 떄문에 React가 변경을 인식하지 못한다. => 원시값은 불변

18. button의 disabled 속성 true가 기본값이다. true는 버튼 클릭 불가 false면 버튼 클릭 가능

19. vite 프로세스에서 Component에 css를 import해서 사용하면 index.html에 해당 CSS 파일이 올라간다. => Scope 고정되지 않는다.

20. inLine Style => 내장 컴포넌트(html)은 style이라는 속성을 가지고 있다. 
ex) <li style={{color:'red'}}></li> => 객체를 값으로 받는다. jsx가 객체를 사용하려면 중괄호가 필요하다.
=> 해당 CSS가 최우선 순위가 되고 JSX의 무결성을 해치기 떄문에 권장하지 않는 인라인 스타일이다.

21. className => class이다. 백틱을 통해 값을 값을 부여하거나 삼항연산자 ||, && 통해 동적으로 표현할 수 있다.

22. module => className에 들어갈 class에 대한 scope를 만들어준다. index.html에 들어가는 import 된 css 파일의 클래스명을 규칙있게 바꾸어 매칭시키는 전략을 사용한다.
22-1. css파일을 rain.module.css로 이름을 바꾼다.
22-2. import classes from 'path.확장자'
22-3. import 파일에서 classes.기존className를 사용하면 className이 유일해진다. => index.html에 있든 상관없음

23. styled Components는 npm으로 설치하고 import {styled} from 'styled-components'를 가져온다.
   const divController = styled.div`css 기존 파일 로직`를 구현한다.
   내부에는 children이 구현되었기 때문에 그냥 사용하면 된다.
    divController는 CSS가 구현된 컴포넌트가 된다.
    만약 inputCssController라면 <inputCssController type="text"> 가능 => 애초에 imput 태그이기 떄문이다. 
    스타일 컴포넌트에 key-value를 전달하면 ``본문에서 props로 받아서 활용활 수 있다. => 이 떄 익명함수를 사용한다.

const InputCssController = styled.input`
	& label{
	color : ${props => {props.invalid ? 'red': 'blue'}}
}
`
=> ${} 백틱 표현식을 사용해서 props를 구현하면 동적으로 표현이 가능하다.

24. tailwind CSS
tailwind CSS를 react에 적용시키는 방법은 변화하고 있다. => 공식 사이트 확인 필수

적용시켰다면 className을 통해 css를 바로 적용시킬 수 있다.

동적으로 반환하고 싶다면 JSX 표현식을 통해 삼항연산자나 ||, &&를 사용한다. 






















