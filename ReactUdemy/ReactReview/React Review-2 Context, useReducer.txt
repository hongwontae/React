1. props의 단방향 통신과 뛰어넘지 못하는 특징을 해결하기 위해 Context를 사용한다.


2. context를 생성하기 위해 하나의 파일을 생성한다. => createContext()를 호출한다. const Context = createContext({.....})
=> createContext() 인자는 직접 값을 가져가는 공간은 아니지만 연결과 자동완성을 시켜주기 떄문에 모양만 잡아준다.
=> ContextProvider라는 컴포넌트를 생성하고 return <Context.provider value{}>{children}</Context.provider>export default ContextProvider를 구현한다.
=> ContextProvider 컴포넌트에서 상태에 관한 로직를 생성하고 상태값을 객체로 보내든 따로 보내든 알아서 value로 주면 된다.

=> 해당 ContextProvider로 app 전체를 감싼다. => Context를 사용할 컴포넌트에서 useContext를 사용한다. const {상태값, 함수.. 등} = useContext(Context); 객체 구조 분해를 통해 값을 가져와서 사용하면 해당 값들은 해당 컴포넌트 스코프에 고정된다.


3. useReducer
const [stateReducer, dispatch] = useReducer(setFunc, initialValue)
setFunc은 두 가지 인자를 받는다. 하나는 state(stateReducer) 다른 하나는 dispatch의 인자
dispatch 함수가 실행되면 setFunc()이 시행된다. => 해당 setFunc에서 state 변경을 일으키면 리렌더링이 발생한다.
=> if나 switchCase문을 사용한다.
