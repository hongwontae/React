1. 컴포넌트 구조에 대해서 파악
2. 각 컴포넌트의 함수에 대해서 파악
3. 컴포넌트가 아닌 커스텀 훅이나 일반 함수로직을 export에 대해서 파악
4. Context 파악


1. App.js가 최상단 컴포넌트이다. 
2. 두 개의 Context를 만들었고 이를 사용하기 위해 전체 컴포넌트를 덮는다. 두 개의 context가 덮기만 하면 된다. 위치 상관x
3. Header, Meals, Cart, Checkout 컴포넌트가 존재한다. 
4. UI 폴더 안에는 Button/ Input/ Modal 컴포넌트가 존재한다. => 높은 재사용성 코드를 생성함 
5. hooks 폴더는 커스텀 훅이 존재/ store에는 Context가 존재

6. Header는 상단부분을 표현하고 Button 컴포넌트를 내보낸다.
6-1. 저장된 품목을 표현하기 위해 reduce를 사용한다. 해당 품목을 가져오기 위해 Context에 접근 => CartContext
6-2. Cart-Modal를 렌더링하기 위해 handleShowCart(){}를 생성하고 Context Func를 가져온다. => 상태값을 'cart'를 change해주는 func
6-3. 품목 수를 표현하고 click 이벤트를 통해 Cart-Modal의 open를 트리거해서 모달을 띄운다.


7. Meals는 http get 통신을 통해 품목을 가져온다. 이 떄 커스텀 훅의 도움을 받는다.
7-1. 커스텀 훅의 상태를 통해 로딩과 에러시 가져올 JSX를 처리한다.
7-2. 컴포넌트 비대화를 피하기 위해서 http 통신으로 가져온 데이터를 다른 컴포넌트를 가져와서 동적으로 반환한다.
7-3. map를 사용해서 건네주고 key는 유일성을 지켜야 한다.


8. MealsItem은 부모 컴포넌트가 건네준 데이터를 표시하는 컴포넌트이다.
8-1. img를 구현할 떄는 node가 백엔드 기준의 사진을 반환하기 떄문에 직접적인 통신을 해서 가져온다.
8-2. 브라우저에 구현된 품목들은 버튼이 눌리면 cart에 담겨야 하기 떄문에 CartContext를 가져온다.
8-3. Context에서 handleAddMealCart(){}에 컨텍스트에 가져온 addItem이라는 함수를 호출시킨다. => 통신을 통해서 가져온 데이터들은 전부 넘겨준다.


9. Cart는 품목을 확인해주는 Modal이다. Context를 가져와서 cart의 데이터/ Modal를 트리거하는 데이터들을 가져온다.
9-1. 컨텍스트를 통해 가져온 데이터를 기반으로 reduce를 통해 값을 표현한다.
9-2. 카트를 닫는 함수, 체크아웃으로 가는 함수를 구현하고 Button의 클릭 이벤트에 바인딩한다.
9-3. 해당 모달에서 가져온 품목을 간략하게 표현해야 하고 컴포넌트 비대화를 예방하기 위해 컴포넌트를 가져와서 동적인 반환을 한다. 
9-3. modal tag는 open이 true가 되었을 떄 브라우저에 모습이 나타난다. false면 보이지 않는다. => 그러나 modal이 구현되면 보이지 않게 구현되는 것이긴 하다.

10. CartItem은 품목을 간략하게 보여주고 품목을 증가시키거나 축소하는 로직을 가지고 있다.
10-1. Cart 부모 컴포넌트에서 addItem, removeItem을 가져와서 넘겨준다.


11. Checkout 컴포넌트는 Input를 구현하고 Post 요청을 통해 품목과 checkout 유저 정보를 백엔드에 보내고 성공 실패 모달을 띄누는 역할을 한다.
11-1. 2개의 컨텍스트를 가져온다. => Modal이 닫히거나 성공 모달을 열기 위한 Context, 기존 품목의 데이터가 있는 Context 이를 기반으로 Post 요청을 한다.
11-2. reduce를 통해 값, checkout Modal를 닫는 함수, 성공 모달을 닫힌 함수를 구현한다.


12. CartContext
12-1. 기본적인 토대를 잡는다. createContext로 기본값을 만들고 내보낼 변수를 생성한다. => provider를 구현한다. children, state, stateFunc를 구현한다.
12-2. addFunc, removeFunc, clearFunc, data변수를 return 한다. => 사용될 함수와 변수
12-3. 초기값은 cart.items = []이다. 

12-4. addItem이 호출되면 들어오는 데이터는 밑의 형식을 따르고 있다.
=> {
"id": "m1",
"name": "Mac & Cheese",
"price": "8.99",
"description": "Creamy cheddar cheese mixed with perfectly cooked macaroni, topped with crispy breadcrumbs. A classic comfort food.",
"image": "images/mac-and-cheese.jpg"
},  => state.items =>[] 배열안에 객체가 하나씩 들어가거나 빠지는 것이다.
12-5. action.type를 확인 => 일치 => findIndex를 통해 기존에 데이터가 있는지 확인 (return 값이 일치하면 해당 index를 반환, 없다면 -1이 반환된다.)
12-6. 기존의 state를 유지해야 한다. => spread 사용 
12-7. 일치하는 게 없다면 push를 사용해서 빈 객체안에 객체를 spread하고 quantity를 1로 설정하고 기존의 state와 updateItems를 반환한다.

12-5. 만약 일치하는 게 존재한다면 기존의 state를 건들이지 않는 방향으로 quantity를 1만 증가시키고 반환한다.

13. removeItem이 호출되면 findIndex를 통해 id가 일치하는지 확인하고 해당 인덱스를 반환한다.
13-1. 기존의 state를 건들이지 않고 quantity가 1이면 해당 데이터를 삭제하고 1이상이라면 quantity만 -1하고 반환한다.

14. clearCart => {...state, items:[]} => 데이터를 비워버리는 로직이다.


15. userProgressContext => Modal을 제외하는 상태 + 함수
state의 초기값은 ""이고 func()를 통해 "cart", "checkout", ""로 바꾼다.


16. useHttp.js => 커스텀 훅이다.
useEffect를 통해 자동 호출을 한다. get일 때만/
useEffect의 무한 루프를 방지하기 위해 useCallback과 의존성 배열을 사용한다. => 객체는 재평가되면 새로운 값으로 인식된다는 것을 알고 있어야 한다.




















