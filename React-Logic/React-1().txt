1. 컴포넌트란?
정의 : HTML+CSS+JS을 반환하는 함수을 의미한다. 
(이를 통해서 사용자 UI를 구축한다.)

특징 
1.-1. 커스텀 컴포넌트 => 개발자가 직접 작성하여 만든 컴포넌트을 의미한다. (커스텀 컴포넌트는 항상 카멜케이스를 지켜줘야 한다.)


2. JSX란?
정의 : JavaScript Syntax Extension, 자바스크립트 문법 확장자를 의미한다.

특징 
2-1. 리턴되는 함수의 이름의 첫 문자는 대문자여야 한다.
2-2. JSX 문법은 브라우저가 바로 해석할 수 없기 때문에 react 빌드 프로세스가 브라우저 친화적인 
code로 변환한 뒤 브라우저에게 전송한다.
2-3. JSX을 사용할 떄 JS 문법을 사용하고 싶다면 중괄호{}을 사용해야 한다. 
{}안에는 삼항 연산식, and, or, 객체, 배열 등을 표현할 수 있다.
2-4. JSX는 브라우저에 전달되기 전에 react 개발서버에 의해서 브라우저 친화적인 코드로 변경한 뒤 브라우저에게 전달된다.


3. React index.jsx
정의 : React가 SPA 구조를 갖춘 이유이자 구조
(웹 사이트 방문자에게 제공되는 단 하나의 페이지이다.)

과정
3-1. getElementById를 통해 dom element을 가져온다.
3-2. ReactDOM.createRoot(entryPoint)를 통해 해당 공간을 리액트가 사용하겠다고 명명한 것
3-3. render(app)을 통해서 app을 렌더링하겠다는 표현
=> index.html은 결국 app만 렌더링한다.


4. <img src="">
특징
4-1. img의 src을 문자열로 주소/이미지 이름을 사용하면 빌드 프로세스 과정에서 깨지거나 효율이 떨어지기 떄문에 
이미지를 import해서 사용하는 것이 좋다.


5. props
정의 : 리액트에서 하향식으로 데이터를 전달할 떄 사용하는 방법

특징
5-1. key = {value} or key = {key : value, key : value} or {...spread}로 보낼 수 있다.
5-2. 받을 때는 props를 통해 받던가 객체 구조 분해를 통해서 key로 받아 올 수 있다.
5-3. props.children을 통해 커스텀 컴포넌트 안에 있는 구조를 구현할 있다.


6. React CSS
정의 : 리액트에서 CSS을 자동으로 적용하지 않는다.

특징
6-1. 일반적인 방식 => import '주소 + 이름.css'로 가져온다.
6-2. 위처럼 가져왔을 떄 CSS 적용은 해당 컴포넌트에 Scope가 고정되는 것이 아니다.


7. props.children
정의 : <사용자 컴포넌트>Components</사용자 컴포넌트> 
=> 사용자 컴포넌트에서 props.children으로 Components을 받을 수 있다.


8. 리액트 리렌더링(재평가)
정의 : 리액트는 일반적인 DOM 조작으로는 DOM이 변경되지 않는다.  
















