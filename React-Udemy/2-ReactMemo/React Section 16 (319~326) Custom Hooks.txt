1. Custom Hooks
=> 사용자 정의 훅을 의미한다.

리액트 훅의 규칙
1-1. 리액트 컴포넌트 함수 안에서 사용해야한다.
1-2. 리액트 훅들은 함수에 중첩해서 사용하면 안된다.

커스텀 훅은 재사용 로직을 만들기 위해서 사용된다.
useEffect이란 훅의 로직을 재사용하고 싶다면 => 다른 파일로 옮겨서 export는 불가/ 컴포넌트 위에서 사용불가
=> useEffect이나 다른 함수들을 재사용하기 위해 커스텀 훅을 사용한다.


2. Custom Hooks 생성하기
리액트는 use라는 이름을 가진 함수들에 특정 규칙을 부여한다. => 커스텀 훅을 만들떄도 use라는 이름이 붙어야 한다.
use라는 함수 본문에 Hooks가 사용되도 된다.


3.  커스텀 훅 상태 관리
export로 함수를 내보내는 것과 같은 원리이다.
3-1. use라는 이름을 가진 함수를 생성하고 export한다.
3-2. 사용할 state들을 관리한다. => 호환성을 위해 useState의 인자에 빈 값을 준다. => 렌더링을 위해 줄 필요도 있다.
3-3. Set 함수를 사용하거나 useEffect를 사용해서 코드를 작성한다.
3-4. 함수의 return 값으로 객체를 내보낸다. => 하나이면 그냥 줘도 된다.

=> 컴포넌트에서 커스텀 훅을 사용하면 스코프가 해당 컴포넌트에 고정된다.


4. Custom Hooks 중첩 함수 노출시키기
=> 커스텀 훅을 한 번 사용할 떄마다 새로운 복사본이 독립적으로 만들어진다.
=> 상태값만 return의 대상이 되는 것이 아니다. 만들어낸 모든 것을 내보낼 수 있다. ex) setFunc
=> 이들은 독립적인 Scope를 가지고 있다는 것을 알아야 한다.


5. 함수로직 Plus
=> async와 await는 비동기 함수일 떄만 사용할 수 있다.
=> await가 붙은 함수를 인위적으로 비동기로 바꾸려면 내부에 Promise 로직을 추가하면 된다.
=> return new Promise((resolve, reject)=>{resolve(...) ... reject(....)})
=> 해당 함수를 넘겨서 커스텀 훅스에서 실행하면 잘 동작한다.























