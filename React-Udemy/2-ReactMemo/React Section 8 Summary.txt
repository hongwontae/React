1. React 내에서 변수를 사용해야 하는데 =>
1-1. 변수가 재평가마다 초기화되지 않고 
1-2. 변수의 변화가 리렌더링을 일으키지 않고 
1-3. 각 컴포넌트 인스턴스에 종속되게 만들고 싶다면 useRef()를 통한 변수를 만들어야 한다. 세 가지 조건 다 충족한다.

컴포넌트 내의 일반적인 변수는 각 인스턴스에 종속되고 리렌더링을 일으키지 않지만 리렌더링을 할 떄마다 변수가 초기화된다.
컴포넌트 외부의 변수는 각 인스턴스에 종속되지 않기에 위험하다.

=> 이때도 useRef.current를 사용해야 한다.


2. useRef()의 일반적인 목적은 element에 직접 참조하는 것이다. 물론 DOM를 조작하는 명령은 React가 수행하지 않는다.
값을 가져오는 역할로 많이 사용된다.


3. useRef의 변수에 참조값이 존재하는 것이 아니라 useRef.current에 참조 값이 존재한다.


4. ref를 넘겨줄 떄는 forwardRef를 사용한다.
4-1. 부모컴포넌트에서 ref를 만들고 사용할 하위 컴포넌트의 ref 키에 값으로 넣어준다.
4-2. forwardRef를 import하고 컴포넌트 실행문에 ()로 forwardRef를 덮고 두 번쨰 인자에 ref를 받는다.
4-3. ref를 사용한다.


5. useImperativeHandle => forwardRef를 세련되게 사용하는 방법이다.
5.1 forwardRef를 구현했다면 useRef를 사용할 필요가 없다. 그러나 useIm..를 사용하려면 하위 컴포넌트에서도 useRef를 구현해야 한다.
5-2. useImperativeHandle({return ...}) => return문에서 메서드를 리턴한다.
5-3. html re={ref}
5-4. 상위 컴포넌트에서 return 문의 메서드를 사용하면 된다. 













