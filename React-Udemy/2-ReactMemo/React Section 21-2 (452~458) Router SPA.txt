1. Error Page
라우트를 정의할 떄 속성으로 errorElement : <ErrorPage/>를 정의한다.
=> 존재하지 않는 URL로 이동하면 ErrorPage가 반환된다.
=> children 라우트는 적용되지 않는다.


2. NavLink Component
=> Link와 같은 역할을 하지만 특수 역할이 존재한다.
=> className으로 {()=>{}} 함수를 받을 수 있다.
=> 함수는 앵커 태그에 추가되어야 하는 CSS 클래스 이름을 리턴한다. 함수는 자동적으로 객체를 받는다. => react-router-dom에 의해 생성된다.
=> isActive은 불리언 값을 가지고 있고 해당 링크가 활성이면 true, 활성이 아니라면 false이다.

=> NavLink는 해당 to의 경로를 확인해서 isActive의 값을 반환한다. 하지만 해당 경로가 and(ex) /home/products)라면 자식요소까지 true의 값을 가지게 되는 특징이 있다.
=> end => 현재 활성인 라우트의 URL 뒤가 to의 문자열 값일 떄만 활성으로 간주한다.


3. useNavigate
=> 프로그램적으로 다른 라우트로 전환할 수 있다.
=> const navi = useNavigate();
=> navi('/products') => 이 함수의 호출을 통해 라우트로 갈 수 있다. 
=> Link 사용을 권장하지만 강제적 이동이 필요한 경우가 존재할 떄 사용한다.


4. 동적 세그먼트
동적인 데이터를 반환할 떄 router를 사용하고 싶다면?
=> 일반적인 방식으로는 불가능하다./ 해당되는 데이터가 몇 개나 있는지 모르고, 그 데이터를 일일이 router 처리하기 어렵다.

=> 동적 세그먼트를 사용한다.
path : '/products/:productId' => /: url에 해당 문자가 있다면 모든 경로를 받아들인다.
ex) 'localhost:3000/products/:123'/ 'localhost:3000/products/:abc'/ 'localhost:3000/products/:-22-2'

=> 이러한 동적 세그먼트를 프론트로 가져오려면
=> const params = useParams();
=> params.동적세그먼트 => :/ 뒤에 붙여진 이름을 가져와야한다. 그렇지 않으면 실패한다.


5. 동적 세그먼트 + 동적 연결
데이터를 fetch해서 배열로 된 객체를 얻었고 동적인 페이지를 구성하고 싶다면?

router을 정의할 떄 path : '/products/:productId'로 정의한다.
동적인 데이터를 반환할 떄 map((ele, idx, arr)=>{ <Link to={`/products/${ele.id}`}>{ele.title}</Link>})
=> title을 누르면 'localhost:3000/products/2'가 라우터에 전송된다.
=> 라우터는 products/:productId(동적 세그먼트)에 반응하여 페이지를 반환한다.


6. 상대경로와 절대 경로
절대경로 => 최상위 디렉토리가 반드시 포함된 경로를 의미
상대경로 => 현재 디렉토리를 기준으로 작성된 경로

OS(운영체제)는 절대경로로 파일의 위치를 찾는다.

=> 상대경로는 기준경로를 기준으로 절대경로가 구성되며 상대경로로 파일 위치를 찾을 수 있는 이유는 기준 경로가 절대 경로로 변환하여 OS에게 전달하기 때문이다.

리액트 상대경로/ 절대경로
/로 시작하면 절대경로이다.
=> /products, /root, /product/:productId
=> 절대경로는 도메인 뒤에서부터 시작한다. => 이어붙이기 x

(라우트를 정의할 떄 children의 부모의 path는 하위 children의 path의 상위 존재여야 한다.)

/가 없다면 상대경로이다.
=> 부모 /root, children => /products, /sese
=> localhost:300/root/products, /root/sese
=> 이어 붙여진다.

<Link to="..">
=> 이전에 활성이었던 경로와 라우트로 돌아가라는 명령
=> 상대경로와 세그먼트를 사용하여 라우트로 이동하기 ..를 사용하면 이전 라우트로 이동하는 것이 아니라 이전 이전 라우트로 이동하게 된다. 동적 세그먼트는 처리를 하지 못하는 것이다.

=> <Link to=".." relative='path'>
=> 동적 세그먼트가 있다면 그것만 처리한다.
=> 기본동작은 route이다.


7. Index Route
부모 라우트의 path와 동일한 자식 path는 레이아웃을 가진채 렌더링된다.
=> 부모의 path : '/', children path : ''
=> 부모의 path :'/', children index: true
=> 부모 라우트에 로딩되는 자식 라우트를 정의할 떄 index : true를 사용한다.


(ErrorKey path오류 / NavLink Link와 동일하지만 className을 익명함수로 받고 인자로 활성되는 Router를 구분할 수 있다. end를 통해 자식 라우터 활성화 무시/ useNavigation 프로그램적 라우터 이동/ 동적 세그먼트 /:(:) => url 뒤로 오는 것을 얻는다. / 상대 절대 경로 절대경로는 url 그대로 박히고 상대경로는 이어붙여진다./ indexKey 부모 라우터와 자식 라우터가 같은 path을 가질 떄 )





 




















