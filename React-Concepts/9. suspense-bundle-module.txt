1. suspense
1-1. 코드 스필리팅과 비동기 데이터 로딩을 처리하기 위한 컴포넌트


2. 코드 스필리팅
2-1. 애플리케이션의 번들 크기를 줄이기 위해 사용되며, 필요한 컴포넌트들을 필요할 떄 로딩한다.
2-2. import된 컴포넌트들은 초기에 애플리케이션 번들에 포함되지 않고, 해당 컴포넌트가 실제로 필요할 떄(렌더링되기 직전에) 
비동기적으로 로드된다.
2-3. import가 실행될 떄 JS 파일을 로드하기 위해 HTTP 요청이 발생한다.
2-2. const LazyComponent = React.lazy(()=>import('/LazyComponent'));
2-3. <Suspense fallback={<div>Loading...</div>}>;
=> 필요할 떄 컴포넌트을 가져오기 위해 통신하고 그 가져오는 시간동안 Suspense을 보여준다.


3. 번들
3-1. 웹 개발에서 하나의 파일로 묶인 자원들을 의미한다.
3-2. 번들은 번들링 도구(webpack, Parcel..)를 통해 생성된다.

3-3. 번들의 특징
1. 하나의 파일
2. 초기 로딩 : Most 번들은 초기 로딩 시에 한 번에 클라이언트에 전송된다. 처음 페이지 방문시 모든 자원 다운로드 => 성능 저하

3-4. React Bundling
1. Babel 로더 : ES6 이상의 JS를 이전 버전으로 변환하여 호환성 증대
2. 이미지 로더 : 이미지 파일을 처리하여 번들에 포함시킨다.
3. CSS 로더 : JS가 CSS를 IMPORT 하여 번들에 포함시켜서 <style> 태그에서 처리 
or CSS를 번들링 과정에서 별도의 파일로 추출 => 브라우저가 독립적으로 CSS 파일 로드
4. 환경 변수 주입 : 개발 환경과 프로덕션 환경에서 다른 설정을 사용할 수 있도록 환경 변수 주입

4. 모듈
4-1. 코드를 조직화하고, 재사용 가능한 단위로 분리하는 방법이다.
4-2. 모듈의 종류
1. 내장 모듈 : 프로그래밍 언어나 런타임 환경에 기본적으로 포함된 모듈(NodeJS에서 fs, http..등)
2. 외부 모듈 : 외부 라이브러리나 패키지로부터 가져와 사용할 수 있는 모듈 (npm 패키지)
3. 사용자 정의 모듈

4-3. 모듈의 특징
1. 독립성(자신만의 스코프를 가진다.)
2. 재사용성
3. 가독성과 유지보수성