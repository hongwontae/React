1. http 캐시
=> 브라우저가 정적 자산을 캐시할지 말지는 서버의 HTTP 응답 헤더가 결정합니다.
=> cache-control이라는 header에 여러 값으로 다양하게 캐시합니다.
=> cache-control : public(모든 사용자가 공유할 수 있는 캐시),
 max-age=31536000(캐시 기간), immtable(절대로 바뀌지 않으니 다시 요청 x)


2. 브라우저는 파일명(URL) 기준으로 캐시를 구분합니다. 파일명이 바뀌면 이전 cache-control은 의미가 없고
 새 요청이 발생합니다.


3. 캐시되는 파일의 해시
=> 빌드 도구에 의해서 해시 값이 붙고 변경됩니다.
=> 파일 내용이 조금이라도 바뀌면 빌드 도구에 의해서 파일명이 변경됩니다.


4. 변경 트리거
=> React 코드 수정, CSS 스타일 변경, 이미지 파일 교체...
=> 즉, state 같은 런타임 떄 발생되는 변경이 아니라 주로 코드 자체 수정의 경우 발생합니다.


5. 메모리 캐시
=> 브라우저 프로세스 RAM 안에 잠깐 저장되는 초고속 캐시입니다.
=> http 응답과 연관 없이 자체적으로 자산을 판단해서 RAM에 올려놓습니다.
(즉, http 캐시와 메모리 캐시 둘 다 자산을 캐시합니다.)
=> 캐시 중에 가장 빠릅니다. 브라우저가 임시로 빠르게 제공하려고 저장하는 캐시 계층입니다.
=> 탭이 삭제되면 사라집니다.
=> 캐시된 자원을 요청하면 제일 먼저 메모리 캐시를 살펴봅니다.


6. 캐시 탐색 우선순위
=> 메모리 캐시 > 서비스 워커 캐시 > http 캐시
