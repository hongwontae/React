1. 배포 과정
1-1. 테스트 
1-2. 최적화 (지연 로딩)
1-3. Build APP for Production
1-4. Upload Production Code to Server
1-5. Configure Server


2. Lazy Loading
2-1. 여러 파일의 코드들은 상호연결되어있기 떄문에 하나의 파일로 만들어진다.
2-2. 처음 리액트 프로젝트를 방문하면 초기 방대한 코드를 모두 다운로드 한 이후에 화면에 렌더링된다.
=> 사용자 경험이 떨어진다./ 지연 로딩이 필요한 이유이다.
2-3. 지연로딩 => 특정 컴포넌트를 나중에 불러오는 것을 의미한다.

2-4. import() => 동적으로 필요할 떄만 import를 한다./ Promise를 반환한다.
=> import('path').then(module => module.loader)

2-5. Lazy => 동적인 import 함수를 인자로 받는다.
=> const BlogPage = lazy(()=>import('./pages/Blog'));

2-6. <Suspense>를 import해서 동적으로 만든 커스텀 컴포넌트를 덮고 fallback props를 사용

=> 이제 한꺼번에 모든 파일을 가져오지 않고 필요할 떄 커스텀 컴포넌트를 다운로드하고 실행한다.



3. Production code Build
3-1. .jsx와 리액트 코드는 브라우저가 이해할 수 있는 코드가 아니기에 변환해야 한다.
3-2. React server가 리액트 코드를 브라우저 친화적인 코드로 변환하여 전달한다.
3-3. npm run build로 최적화된 변환 코드 번들이 생성된다.
=> 해당 파일들을 서버에 업로드하면 된다.


4. 정적 웹 사이트 호스팅
4-1. firebase 로그인
4-2. 정적 Hosting 클릭
4-3. npm install firebase-tools
4-4. 처음이라면 firebase-login

4-5. firebase-init
=> Hosting만 선택
=> 호스팅 대상 주소 => build

4-6. firebase deploy
=> 정적 웹 사이트 배포하기
4-7. firebase hosting:disable
=> 배포된 웹 사이트 오프라인으로 전환



