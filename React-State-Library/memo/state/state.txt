1. 상태란?
=> 컴포넌트가 기억해야 하는 동적인 데이터를 의미합니다.
=> 상태가 변경되면 상태를 가지고 있는 컴포넌트는 재평가가 됩니다.


2. 상태는 언제 사용되는가?
2-1. 사용자 상호작용 처리 (입력 값, 클릭한 버튼 상태, 체크박스 선택 여부..)
2-2. UI 상태 관리 (모달, 스피너 로딩 상태..)
2-3. 컴포넌트 간 데이터 전달
2-4. 비동기 데이터 관리


3. state 변경 과정-1
3-1. setState 호출
3-2. 해당 상태 변경 요청을 업데이트 대기열(queue)에 추가하고 즉시 상태 반영하지 않습니다.
=> 해당 대기열은 React 내부에서 처리되는 별도의 매커니즘입니다.
3-3. React는 렌더링 사이클까지 모든 상태 업데이트 요청을 대기열에 모아서 배치 처리합니다.
=> 상태 값은 변경되었지만 아직 화면 (DOM)에 상태 변경이 보이지 않습니다.
3-4. 컴포넌트가 재실행되어 새로운 Virtual DOM을 얻습니다.
3-5. 새로운 Virtual DOM과 이전 Virtual DOM을 비교하여 변경된 부분을 파악합니다. (Diffing 알고리즘)
3-6. requestAnimationFrame에 의해서 변경된 내용을 브라우저가 UI를 다시 그립니다.
(requestAnimationFrame은 브라우저가 화면을 그리기 전에 호출됩니다.)


4. render cycle
4-1. React가 상태가 변경된 컴포넌트를 어떻게 업데이트하고 화면에 렌더링하는 과정을 말합니다.
4-2. 렌더링 주기는 크게 두 가지 주요 단계

1. 상태 업데이트 단계 : setState로 상태가 변경되면 해당 컴포넌트를 다시 렌더링해야 한다고 생각합니다.
(상태 업데이트가 배치 처리되어 하나의 렌더링에서 여러 상태 변경을 처리할 수 있습니다.)
2. 렌더링 단계 : 상태 변경 후, React는 렌더링을 시작합니다. 이때 상태가 반영된 UI를 그립니다.
(Virtual DOM을 사용해 실제 DOM과 비교하고, 상태가 변경된 부분만 실제 DOM에 반영합니다.)


5. state와 await 키워드
5-1. setState가 호출되고 다음에 await가 존재하는 함수가 실행되었을 떄 해당 비동기 작업이 완료될 떄까지 태스크 큐에
존재합니다.
5-2. 이 떄 업데이트 큐에 존재하는 setState가 값을 변경하고 렌더링할 기회를 얻습니다.
