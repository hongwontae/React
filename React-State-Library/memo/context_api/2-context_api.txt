1. Context-API 로직
1-1. createContext를 통해 Context를 생성합니다. => useContext에서 참조할 수 있는 값을 생성합니다.
1-2. 함수를 생성하고 children을 가지고 옵니다.
1-3. 함수 내에서 createContext에서 반환한 값.Provider 컴포넌트를 return합니다. 그리고 안에 children을 구현합니다.
1-4. 함수 내부에서 state를 정의합니다.
1-5. 전역적으로 사용할 상태들을 모아서 객체로 정의합니다.
1-6. 정의된 객체는 <반환한 값.Provider value={정의된 객체}>로 정의합니다.

1-7. 전역 상태를 공유할 컴포넌트들을 감쌉니다. => App.jsx나 main.jsx에서 모든 컴포넌트를 감쌉니다.



2. Context-API 단점 해결
2-1. Context-API의 가장 큰 단점은 하나의 Context를 공유하는 컴포넌트들이 존재할 떄 하나의 컴포넌트가 상태가
변경된다면 다른 컴포넌트들이 재평가되는 단점이 존재합니다.
2-2. 하나의 Context에 여러 개의 state를 정의하지 않고 나눠서 정의하고 사용할 컴포넌트에 담습니다.
=> 이 떄 순서는 상관이 없습니다.
=> 이 작업을 완료하면 Context는 여러 개가 존재할테고 이 떄 다른 상태가 변경되도 다른 컴포넌트들이 영향을 받지
않습니다.

2-3. React.memo, useMemo, useCallback를 사용하는 방법도 존재합니다.
