1. Redux Thunk란?
=> Redux에서 비동기 작업(예: API 호출)을 처리하기 위해 가장 많이 사용되는 미들웨어입니다.
=> Redux는 기본적으로 동기 상태만 지원하기에 redux-thunk를 install하여 사용해야 합니다.


** 용어 정리 **
Action : Redux에서 상태 변경하는데 사용하는 객체입니다.
Action Creator : 특정 액션 객체를 반환하는 함수입니다.
비동기 액션 생성자 : 액션 객체를 반환하지 않고, dispatch 함수를 호출하여 액션을 전달합니다.

** 비동기 액션 생성자 구조 **
1. Redux의 철학과 비동기 작업의 필요성을 동시에 충족하기 위해 함수 내에서 함수를 return하는 구조가 되었습니다.
2. redux는 동기 상태만 처리 => redux 지원 x, redux-thunk 미들웨어 추가 탄생
3. reducer는 순수함수를 사용해야 합니다. => redux의 규칙 => 그렇기에 action에서 함수를 반환하는 구조
4. redux-thunk는 dispatch가 호출될 떄 액션이 객체인지 함수인지 판단합니다.
=> 함수일 경우 함수를 실행하여 dispatch와 getState를 함수의 인자로 전달합니다.
=> getState는 현재 상태를 의미하고 이를 통해 조건부 로직을 추가할 수 있습니다.


2. thunk 동작 원리
2-1. import {createStore, combineReducers, applyMiddleware} from 'redux';
2-2. import {thunk} from 'redux-thunk';
2-3. createStore(rootReducers, applyMiddleware(thunk))
=> 동기 상태와 비동기 상태를 사용하기 위한 store 설정입니다.

2-4. 비동기 액션 생성자를 정의합니다.
=> react-thunk store 처리를 했기 때문에 액션 생성자가 함수를 return 하면 dispatch와 getState를 받아서
흐름에 맞게 비동기 처리를 할 수 있습니다.

2-5. reducer를 생성합니다.
=> loading, error, data 상태를 initialState로 정의하고 그에 따른 action type를 구분하여 각자의 상태 변화
return을 정의합니다.

2-6. useSelector를 사용해서 컴포넌트와 store 구독관계를 형성합니다.
2-7. useEffect나 event를 사용하여 비동기 데이터를 가져옵니다.

2-8. loading이 true일 때 data는 없기 때문에 이에 대한 처리를 해줘야 에러가 발생하지 않습니다.
=> 옵셔널 체이닝이나 if문으로 null이나 undefined 처리를 합니다.




