1. Redux란?
=> 자바스크립트 애플리케이션의 상태(state)를 중앙 집중식으로 관리할 수 있게 해주는 라이브러리입니다.


2. Redux Flow
2-1. dispatch 함수가 액션을 담아서 호출되고 store에 전달됩니다.
2-2. store에서 reducers를 호출합니다. 이 떄 action의 type에 의해 구체적인 상태 변화를 일으킬 수 있습니다.
2-3. useSelector를 사용하면 자동으로 store와 컴포넌트의 구독관계가 이루어집니다.
2-4. reducer에서 상태가 변경되면 useSelector에서 상태를 가진 컴포넌트의 상태도 변경되어 리렌더링이 일어납니다.


3. Redux 주요 개념
3-1. Store (상태 저장소)
=> store는 애플리케이션의 상태를 저장하는 객체입니다.
=> store는 애플리케이션 전체에서 공유되며, 상태를 읽고 업데이트하는 역할을 합니다.

3-2. Action (액션)
=> 애플리케이션에서 일어나는 변경을 설명하는 객체입니다.
=> 액션 객체는 type 속성을 반드시 가져야 하며, 그 외에도 필요한 데이터를 담을 수 있습니다.

3-3. Reducer (리듀서)
=> 리듀서는 state와 action을 인수로 받아 새로운 state를 반환하는 순수 함수입니다.

3-4. Dispatch (디스패치)
=> 디스패치는 action을 store로 전달하는 함수입니다. 이를 통해 상태가 변경됩니다.

3-5. Selector (셀렉터)
=> 셀렉터는 state에서 필요한 데이터를 추출하는 함수입니다. 

3-6. Provider (프로바이더)
=> Provider는 React 애플리케이션에 Redux store를 연결하는 컴포넌트입니다.


4. redux 장점
4-1. 예측 가능한 상태 관리
4-2. 중앙 집중식 상태
4-3. 개발 도구
=> Redux DevTools와 같은 강력한 디버깅 도구를 사용할 수 있습니다.