1. jotai 사용법
1-1. import {atom} from 'jotai';
1-2. export const inputAtom atom(초기값) => Recoil처럼 상태를 정의합니다.
1-3. 사용할 컴포넌트에서 import {useAtom} from 'jotai'를 불러오고 정의된 상태를 불러옵니다.
1-4. const [inputState, setInputState] = useAtom(inputAtom)
=> useState처럼 사용하면 됩니다.


2. atom get 함수
2-1. get은 atom의 값을 읽는 데만 사용되며 직접적으로 상태를 변경할 수는 없습니다.
2-2. 기본 atom이 변경되면 파생 상태도 자동으로 업데이트됩니다.
2-3. get을 비동기 함수와 함께 사용하여 상태 값을 비동기적으로 계산할수 있습니다.
=> 즉, get을 사용해야만 read-only 데이터가 됩니다.

2-4. atom 내에서 콜백함수를 통해 값을 반환할 수 있습니다. 이 떄 인자에 get, set, newValue가 존재합니다.
2-5. atom((get)=>{
    return get(atom).count+1
}) => get 함수를 통해 만들어낸 값을 컴포넌트에서 사용할 떄는 read-only입니다.
=> 즉, const [state] = useAtom(getAtom)로 사용합니다.


2-6. atom(
    (get)=>get(counterAtom),
    (get, set, newValue)=>{
        set(counterAtom, get(counterAtom)+newValue)
    }
) => set 함수의 첫 번쨰 인자는 어떤 atom의 값을 수정할지 지정합니다.
=> 두 번쨰 인자는 새로운 값을 제공합니다.

2-7. atom의 set를 통해 새로운 값을 만들어낼 떄 원본이 객체라면 객체 상태를 유지해야 합니다.
=> set(CounterAtom, {count : get(CounterAtom).count + newValue})


3. atom의 상태가 get을 통해 reaad-only가 되어버리면 writable atom에서 값을 변경할 떄 완전 새로운 상태를 return
해야 됩니다.


4. 상태가 객체 형태라면 setState나 set()를 사용할 떄 객체를 반환해야 안전하게 변경할 수 있습니다.
