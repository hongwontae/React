1. zustand 기본 사용법
1-1. create 함수를 사용하여 상태를 관리합니다.
=>  create 함수는 상태와 그 상태를 변경하는 함수를 포함한 객체를 반환하는 함수를 생성합니다.
=> 상태 변경 함수는 set 함수를 사용합니다.

1-2. export const CountStore = create((set)=>({
    // 여기서 상태와 상태 변경 함수를 모두 정의합니다.
    count : 1,
    increment : ()=>set((prev)=>({count : prev.count+1})),
    decrement : ()=>set((prev)=>({count : prev.count-1}))
}))

1-3. 컴포넌트에서 create의 반환값을 가져와서 상태와 상태 변경 함수를 사용합니다.
=> const {count, increment, decrement} = CountState();


2. 상태 구독
2-1. useStore 훅을 사용할 때, 상태의 일부만 선택적으로 구독할 수 있습니다.
=> 해당 상태만 변경될 때 컴포넌트가 리렌더링됩니다.
2-2. const count = CountState(state=> state.count); //count만 구독


3. set(state=>...)
3-1. 상태 변경 함수는 set을 사용합니다.
3-2. set의 인자인 state는 이전 값을 의미합니다. 그러나 create에서 정의한 모든 객체의 모든 것이 담겨있습니다.
3-3. 즉, state에는 count, increment, decrement 모두 존재합니다.
3-4. 또한, create에서 상태를 객체로 정의했다면 이를 set으로 변경할 떄 immer해야 합니다.
=> 기존 값을 건드리지 않고 변경해야 합니다. (새로운 값 return)

ex) const store = create(set=>({
    inputData : {name : '', age : ''},
    nameHandler : (e)=>set(state => ({inputData : {...state.inputData, name : e.target.value}}))
}))
=> 상태가 변경될 떄는 내가 정의한 상태 자체를 불러와서 새로운 값으로 변경하는 것입니다.
=> {
    inputData : {name : '', age :''},
    nameHandler,
    ageHandler
}
=> set(state => ({inputData : {state.inputData, }}))



