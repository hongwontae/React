1. 프로미스 병렬처리
=> 여러 비동기 작업을 동시에 시작하고 각 작업이 독립적으로 완료될 때까지 기다리는 것을 의미한다.
=> 각 비동기 작업이 끝날 떄까지 기다리지 않고 각자 실행된다.
=> 효율성 증가


2. promise.all()
2-1. 여러 프로미스를 동시에 처리하고, 모든 프로미스가 완료될 때까지 기다린 후 결과를 반환하는 함수
2-2. 이터러블 객체를 인자로 받는다.
2-3. 병렬로 처리된다.
2-4. 프로미스가 성공하면 각 프로미스 결과를 동일한 순서로 담은 배열 반환
2-5. promise.all()이 하나라도 실패하면 첫 번쨰로 실패한 프로미스의 이유를 담은 단일 프로미스 반환


3. Buttons.findAll => buttons.map(ele => ele.update({color : 'red'})); => Promise.all()
=> findAll로 DB의 데이터를 찾으면 배열 객체 데이터가 반환된다. 해당 객체는 여러 메서드도 포함하고 있다.
=> update나 destroy를 호출하면 프로미스를 반환다.
=> Promise.all을 사용해서 병렬적으로 처리한다. => 효율성 증가

