1. immutability-helper
1-1. 불변 데이터를 간편하게 업데이트 할 수 있도록 도와주는 라이브러리
1-2. 기존의 데이터를 변경하지 않고 새로운 데이터를 생성하는 방식

1-3. 명령어
1. $set: 값을 설정합니다.
2. $push: 배열의 끝에 하나 이상의 요소를 추가합니다.
3. $unshift: 배열의 시작 부분에 하나 이상의 요소를 추가합니다.
4. $splice: 배열의 요소를 추가, 제거 또는 교체합니다.
5. $merge: 객체를 병합합니다.
6. $apply: 함수를 사용하여 값을 업데이트합니다.

1-4. 사용 방법
import update from 'immutable-helper';
const initialValue = {user : {name : 'hwt', age : 30}, itmes : [1]}
update(initialValue, {
    user : {
        name : {$set : 'Bob'}
    },
    items : {$push : [4]}
})
=> update 함수를 호출하고 첫 번쨰 인자값은 초기값 두 번쨰 인자값은 객체를 받는다.
=> 두 번쨰 객체는 변경 명령어를 사용해서 어떤 값을 변경할지 지정한다.
=> 


2. img 태그는 자식 요소를 가질 수 없다.


3. useMutation의 mutate 함수는 인자를 하나만 가질 수 있다.


4. get 요청을 특정 데이터를 표현하고 싶다면 body를 사용하는 것이 아니라 쿼리 스트링을 사용해야 한다.


5. sequelize로 sync를 사용해서 model을 기반으로 자동으로 테이블을 생성하려면 설정된 sequelize 변수에서 sync를 호출해야 한다.
=> 그리고 model들을 server.js에서 require해야 한다.


6. bulkCreate
6-1. 배열 내에 여러 개의 객체 데이터를 한꺼번에 저장할 떄 매우 유용한 메서드이다.
6-2. 테이블의 칼럼과 객체의 key가 일치하면 여러개의 객체를 간단히 DB에 INSERT한다.
6-3. Message.bulkCreate(message).then((resulte)=>{res.status(500).json({message : 'Success!'})});


7. Cannot set headers after they are sent to the client
=> Node.js에서 요청에 대한 응답을 한꺼번에 두 번 보낼 떄 발생하는 에러이다.


8. status Code
1xx => 임시 응답
2xx => 성공
3xx => 리다이렉션, 완전한 처리를 위해서 추가 동작 필요
3xx => 클라이언트 에러
4xx => 서버 에러


9. create
9-1. 단일 레코드 저장 떄 사용하는 메서드
9-2. 객체 형식을 가지는 key가 테이블의 column과 일치하면 저장된다.

