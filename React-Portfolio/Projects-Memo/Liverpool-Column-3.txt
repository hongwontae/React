1. 축구 포메이션 판 제작
1-1. React DnD를 통해서 생성
1-2. npm install react-dnd react-dnd-html5-backend => DnD 라이브러리 설치


2. DndProvider 컴포넌트에 backend props HTML5Backend 부여
=> dndProvider는 애플리케이션에 React-Dnd 기능을 제공
=> backend라는 props 값이 부여되어야 window Object에 주입된다.


3. const [...] = useDrag({...})
3-1. useDrag의 type => 드래그 가능한 아이템의 종류를 정의한다.
3-2. useDrag의 설정 객체의 type과 useDrop의 설정 객체의 accept은 같은 값을 가져야 한다.

3-3. useDrag의 item 
=> 드래그 가능한 요소가 드래그될 떄 전달되는 데이터를 정의한다.
=> 데이터는 드롭 타겟에 전달된다. 
=> 여기서 데이터를 전달하면 useDrop의 설정 객체의 drop 프로퍼티에 첫 번쨰 인자에서 받을 수 있다.

3-4. useDrag의 collect
=> 드래그 상태를 수집하여 컴포넌트의 상태로 사용할 수 있게 해준다.
=> collect 함수는 모니터 객체를 인자로 받는다. 그리고 모니터 객체를 이용해서 현 드래그 상태에 대한 정보를 반환한다.
=> 반환된 정보는 컴포넌트 상태가 되고 드래그 상태에 따라 UI를 업데이트한다.

3-5. useDrag 호출되었을 떄 반환값은 배열이다.
=> 첫 번쨰 인자는 객체이고 collect 함수에서 수집된 드래그 상태 정보를 포함한다.
=> 두 번쨰 인자는 drag는 드래그 가능한 요소에 드래그 앤 드롭 기능을 바인딩한다./ 요소의 ref에 바인딩해야 한다.


3-6. useDrag의 모니터 객체
1. isDragging(): 현재 드래그가 진행 중인지 여부를 반환합니다.
2. getItem(): 현재 드래그 중인 아이템의 정보를 반환합니다.
3. getInitialClientOffset(): 드래그 시작 시 아이템의 초기 클라이언트 오프셋을 반환합니다.
4. getClientOffset(): 현재 드래그 중인 아이템의 클라이언트 오프셋을 반환합니다.
5. getDifferenceFromInitialOffset(): 드래그 시작 시점과 현재 시점 간의 오프셋 차이를 반환합니다.
6. getDropResult() : useDrag의 drop의 호출 결과를 얻는다.

3-7. useDrag의 end
=> 드래그가 끝났을 떄 호출되는 함수이다.
=> end의 매개변수는 item(드래그된 정보), monitor(드래그 상태에 대한 정보)
=> 드래그 성공 여부 확인/ 드래그된 아이템 원래 위치로 되돌리기/ 드래그가 취소된 경우 처리/ 기타 후속 작업



4. const [...] = useDrop({...});
4-1. useDrop의 accept
=> 드롭 타겟이 어떤 유형의 드래그된 아이템을 받아들일지 정의한다.
=> drag의 type과 drop의 accept은 일치해야 한다./ accept을 통해 특정 타입의 아이템만 받아들일수 있도록 제한 가능

4-2. useDrop의 drop
=> 드롭 이벤트가 발생했을 떄 호출되는 콜백 함수이다. / 정확히는 드래그된 아이템이 드롭 타겟에 놓일 떄 drop 함수 실행
=> 드롭된 아이템에 대해 원하는 작업을 수행
=> drop이 호출되면 인자에 아이템 정보와 모니터 객체가 전달된다.
=> drop : (item, monitor)=>{} item은 drag에서 온것, monitor는 드래그 상태에 대한 추가 정보
=> drop이 호출되고 반환값이 반환되면 useDrag 함수의 end 함수에서 monitor.getDropResult()를 통해 엑세스할 수 있다.

4-3. useDrop의 collect
=> 드롭 타겟의 상태를 수집하여 컴포넌트 상태로 사용할 수 있다.
=> monitor 객체를 인자로 받아서 현재 드롭 상태에 대한 정보를 반환한다.

4-4. useDrop의 모니터 객체
1. isOver(): 드래그된 아이템이 드롭 타겟 위에 있는지 여부를 반환합니다.
2. canDrop(): 드래그된 아이템이 현재 드롭 타겟에 드롭될 수 있는지 여부를 반환합니다.
3. getItem(): 현재 드래그 중인 아이템의 정보를 반환합니다.
4. getInitialClientOffset(): 드래그 시작 시 아이템의 초기 클라이언트 오프셋을 반환합니다.
5. getClientOffset(): 현재 드래그 중인 아이템의 클라이언트 오프셋을 반환합니다.
6. getDifferenceFromInitialOffset(): 드래그 시작 시점과 현재 시점 간의 오프셋 차이를 반환합니다.

4-5. useDrop 함수 반환값은 배열이고 첫 번쟤 값은 collect 함수 호출되어 반환된 상태 객체이다.
4-6. useDrop의 두 번쨰 값은 drop이고 이를 통해서 드롭 타겟을 지정한다. => ref로 바인딩하면 된다.


5. useDrag와 useDrop의 collect 함수 호출 시점

5-1. useDrag의 collect
1. 컴포넌트 마운트
2. 드래그 시작
3. 드래그 중
4. 드래그 종료

5-2. useDrop의 collect
1. 컴포넌트 마운트
2. 드래그된 아이템이 드롭 타겟 위에 들어오거나 나갈 떄
3. 드롭타겟 영역에서 아이템이 드롭될 떄
4. 드래그된 아이템이 드롭 타겟 위에 있는 동안 드롭 가능 여부가 변경될 떄


6. useDrag와 useDrop의 handlerId
=> 각 드래그 소스와 드롭 타겟의 고유한 id를 부여하여 dnd 시스템이 어떤 요소를 드래그하는지, 어떤 요소가 드롭 타겟인지 구분가능
=> handlerId를 통해서 react-dnd는 이벤트 처리
=> handlerId를 통해 dnd가 상태관리한다.
=> collect 내에서 monitor.getHandlerId()를 통해 얻을 수 있다.



*** 드롭 타겟 => 드래그된 아이템을 받아들이는 요소 => useDrop으로 정의한다.

*** 모니터 객체 => 드래그와 드롭 상태를 추적하고 관리하는 객체이다. useDrag와 useDrop 내에서 사용된다.
